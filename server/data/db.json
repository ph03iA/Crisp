{
  "candidates": [
    {
      "id": "c_1759359605489",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759359564565"
    },
    {
      "id": "c_1759359762752",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759359711348"
    },
    {
      "id": "c_1759359896157",
      "name": "John Doe",
      "email": "youremail@yourdomain.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759359841285"
    },
    {
      "id": "c_1759360206454",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759360173220"
    },
    {
      "id": "c_1759360476630",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759360434860"
    },
    {
      "id": "c_1759360634523",
      "name": "John Doe",
      "email": "youremail@yourdomain.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759360595110"
    },
    {
      "id": "c_1759360906881",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759360868995"
    },
    {
      "id": "c_1759361214546",
      "name": "John Doe",
      "email": "youremail@yourdomain.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759361176578"
    },
    {
      "id": "c_1759361898861",
      "name": "John Doe",
      "email": "youremail@yourdomain.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759361861889"
    },
    {
      "id": "c_1759362257802",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759362139117"
    },
    {
      "id": "c_1759362452435",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759362422534"
    },
    {
      "id": "c_1759362552072",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759362520181"
    },
    {
      "id": "c_1759362601084",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759362567780"
    },
    {
      "id": "c_1759362749984",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759362699929"
    },
    {
      "id": "c_1759363068294",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759363020603"
    },
    {
      "id": "c_1759363253583",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759363204798"
    },
    {
      "id": "c_1759363349155",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759363279120"
    },
    {
      "id": "c_1759363601994",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759363521744"
    },
    {
      "id": "c_1759364220933",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759364134735"
    },
    {
      "id": "c_1759364681649",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759364609098"
    },
    {
      "id": "c_1759364895758",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 67,
      "summary": "Good performance.",
      "sessionId": "s_1759364823988"
    },
    {
      "id": "c_1759364972509",
      "name": "Atul Tiwari",
      "email": "atultiwari00497@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759364918393"
    },
    {
      "id": "c_1759365316098",
      "name": "Ethan Yang",
      "email": "",
      "score": 50,
      "summary": "Needs improvement.",
      "sessionId": "s_1759365220319"
    },
    {
      "id": "c_1759365716306",
      "name": "Ethan Yang",
      "email": "",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759365325956"
    },
    {
      "id": "c_1759365841593",
      "name": "Ethan Yang",
      "email": "",
      "score": 67,
      "summary": "Good performance.",
      "sessionId": "s_1759365742831"
    },
    {
      "id": "c_1759365931519",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759365871370"
    },
    {
      "id": "c_1759366457030",
      "name": "Ethan Yang",
      "email": "",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759364980220"
    },
    {
      "id": "c_1759366737220",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759366640397"
    },
    {
      "id": "c_1759366922561",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759366811235"
    },
    {
      "id": "c_1759367501838",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759367439077"
    },
    {
      "id": "c_1759367797496",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759367745349"
    },
    {
      "id": "c_1759369912362",
      "name": "Ethan Yang",
      "email": "",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759366050995"
    },
    {
      "id": "c_1759369994039",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759369952498"
    },
    {
      "id": "c_1759370327031",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 50,
      "summary": "Needs improvement.",
      "sessionId": "s_1759370256667"
    },
    {
      "id": "c_1759370496184",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759370427388"
    },
    {
      "id": "c_1759411675025",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759411588261"
    },
    {
      "id": "c_1759412354294",
      "name": "Ethan Yang",
      "email": "",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759412288920"
    },
    {
      "id": "c_1759412702640",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759412380229"
    },
    {
      "id": "c_1759412800955",
      "name": "Ethan Yang",
      "email": "",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759412739867"
    },
    {
      "id": "c_1759412940070",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 50,
      "summary": "Needs improvement.",
      "sessionId": "s_1759412862280"
    },
    {
      "id": "c_1759413137288",
      "name": "Ethan Yang",
      "email": "",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759412981695"
    },
    {
      "id": "c_1759414852103",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759414769098"
    },
    {
      "id": "c_1759415425876",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759415274417"
    },
    {
      "id": "c_1759416081955",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759416002942"
    },
    {
      "id": "c_1759417274506",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759417219539"
    },
    {
      "id": "c_1759417521755",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759417436655"
    },
    {
      "id": "c_1759417626279",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759417561421"
    },
    {
      "id": "c_1759417920434",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 33,
      "summary": "Needs improvement.",
      "sessionId": "s_1759417845132"
    },
    {
      "id": "c_1759418318173",
      "name": "Prajwal Chahande",
      "email": "prajwalchahande7@gmail.com",
      "score": 0,
      "summary": "Needs improvement.",
      "sessionId": "s_1759418246043"
    },
    {
      "id": "c_1759419524997",
      "name": "Prajwal Chahande+91-9860738071",
      "email": "prajwalchahande7@gmail.com",
      "score": 17,
      "summary": "Needs improvement.",
      "sessionId": "s_1759419454070"
    }
  ],
  "sessions": {
    "s_1759342404293": {
      "id": "s_1759342404293",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759342413102": {
      "id": "s_1759342413102",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759342557571": {
      "id": "s_1759342557571",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759342679312": {
      "id": "s_1759342679312",
      "candidate": {
        "name": "John Doe",
        "email": "youremail@yourdomain.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759342707471": {
      "id": "s_1759342707471",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759342949543": {
      "id": "s_1759342949543",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Reverie Diary project, Prajwal used LocalStorage. What is the primary benefit of LocalStorage for client-side data persistence?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React.js",
            "LocalStorage",
            "client-side persistence"
          ],
          "options": [
            "Allows persistent client-side data storage without a backend.",
            "Stores data securely on the server.",
            "Enables real-time data synchronization with other clients.",
            "Optimizes database queries by caching data."
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "In the CryptoMetrics project, Prajwal used Express.js with Node.js. What is Express.js primarily used for in this context?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Node.js",
            "Express.js",
            "backend",
            "API"
          ],
          "options": [
            "Defining API endpoints and middleware.",
            "Managing frontend UI components.",
            "Processing client-side user authentication.",
            "Rendering dynamic web pages in the browser."
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "The DataAlchemist project used virtualized rendering for 1,000+ rows. What problem does virtualized rendering primarily address in web development?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Next.js",
            "virtualized rendering",
            "performance",
            "large datasets"
          ],
          "options": [
            "Optimizing performance for displaying long lists by rendering only visible items.",
            "Reducing server-side rendering latency.",
            "Minimizing bundle size for faster page loads.",
            "Improving SEO by making content crawlable."
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "Prajwal's MangaFlow project uses Manifest V3 for a Chrome Extension. What is a key architectural change introduced by Manifest V3 concerning background scripts?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Chrome Extensions API",
            "Manifest V3",
            "background service workers"
          ],
          "options": [
            "Persistent background pages are replaced with event-driven service workers.",
            "Permissions are granted automatically without user consent.",
            "Content scripts can directly access extension APIs.",
            "All extension logic must be bundled into a single file."
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "In CryptoMetrics, NATS pub-sub messaging was used to broadcast real-time crypto data updates. What advantage does NATS provide over direct HTTP polling for this use case?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Node.js",
            "NATS",
            "pub-sub",
            "real-time",
            "system design"
          ],
          "options": [
            "Allows services to receive updates without constant client-side requests.",
            "Ensures strong data consistency across all subscribers.",
            "Provides built-in persistence for all messages.",
            "Simplifies firewall configurations for external APIs."
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "DataAlchemist converts natural language rules from CSVs into executable logic. Which combination of technologies from Prajwal's stack likely facilitates this rule interpretation and application?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Next.js",
            "TypeScript",
            "Papa Parse",
            "Gemini API",
            "CSV",
            "logic mapping"
          ],
          "options": [
            "Papa Parse for CSV parsing and Google Gemini API for natural language processing.",
            "Tailwind CSS for UI and Chart.js for data visualization.",
            "NATS for messaging and MongoDB for storage.",
            "React.js for components and LocalStorage for state."
          ],
          "correctIndex": 0
        }
      ],
      "answers": []
    },
    "s_1759343000400": {
      "id": "s_1759343000400",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759343238705": {
      "id": "s_1759343238705",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759343281208": {
      "id": "s_1759343281208",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759343318735": {
      "id": "s_1759343318735",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759343765678": {
      "id": "s_1759343765678",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Explain the virtual DOM in React.",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "2",
          "text": "What is the difference between let, const, and var?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": []
        },
        {
          "id": "3",
          "text": "Describe how closures work in JavaScript.",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "4",
          "text": "How does Node.js handle asynchronous operations?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": []
        },
        {
          "id": "5",
          "text": "How would you optimize a large React list for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        },
        {
          "id": "6",
          "text": "Design an API for user authentication and sessions.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": []
        }
      ],
      "answers": []
    },
    "s_1759344575416": {
      "id": "s_1759344575416",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, Prajwal used `LocalStorage` for real-time, persistent client-side data. What is its primary benefit in this context?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "LocalStorage",
            "Reverie Diary",
            "React.js"
          ],
          "options": [
            "Storing large, complex datasets for server processing.",
            "Persisting user preferences across browser sessions without a backend.",
            "Facilitating real-time, bidirectional communication with a WebSocket server.",
            "Encrypting sensitive user data before transmission to a backend."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For CryptoMetrics, Prajwal used `MongoDB` to store crypto asset metrics. What type of database is MongoDB, based on its structure?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics",
            "NoSQL"
          ],
          "options": [
            "A relational database, using tables and structured queries.",
            "A document-oriented NoSQL database, storing data in flexible JSON-like documents.",
            "A graph database, focusing on relationships between entities.",
            "A time-series database, optimized for sequential data points."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "DataAlchemist efficiently handled 1,000+ rows using virtualized rendering. What problem does virtualization primarily solve in a UI like this?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "Tailwind CSS"
          ],
          "options": [
            "Reducing server load by offloading data processing to the client.",
            "Improving initial page load times by fetching data asynchronously.",
            "Optimizing rendering performance for large lists by only displaying visible elements.",
            "Securing data transfer by encrypting rendered content."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, `NATS` pub-sub messaging was used to broadcast updates. What is the core benefit of using a pub-sub model like NATS for this?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NATS",
            "pub-sub",
            "CryptoMetrics",
            "Node.js"
          ],
          "options": [
            "Ensuring all messages are stored persistently for historical analysis.",
            "Allowing direct, point-to-point secure connections between two services.",
            "Decoupling publishers from subscribers, enabling flexible, real-time data distribution.",
            "Orchestrating complex workflows with strict message ordering guarantees."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "MangaFlow used `Manifest V3` and background service workers. What is a key architectural change introduced by Manifest V3 for Chrome extensions?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Manifest V3",
            "Chrome Extensions API",
            "MangaFlow",
            "JavaScript"
          ],
          "options": [
            "Enabling synchronous network requests for improved reliability.",
            "Replacing persistent background pages with event-driven service workers that become inactive.",
            "Allowing unlimited persistent storage access without user prompts.",
            "Mandating JQuery for all DOM manipulations within extensions."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "CryptoMetrics used cron-based syncing with retry logic to handle CoinGecko API rate limits. How does this strategy primarily mitigate rate limit issues?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "cron",
            "retry logic",
            "API rate limits",
            "CoinGecko API",
            "CryptoMetrics",
            "Node.js"
          ],
          "options": [
            "By dynamically increasing the allowed request frequency from the API provider.",
            "By storing all API responses in a client-side cache to avoid subsequent requests.",
            "By scheduling requests at intervals and pausing/retrying on specific rate limit errors.",
            "By distributing requests across multiple IP addresses to bypass the set limits."
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759344627440": {
      "id": "s_1759344627440",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Reverie Diary app, Prajwal used LocalStorage. What was its primary function, as stated in the project description?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "LocalStorage",
            "Reverie Diary",
            "React.js"
          ],
          "options": [
            "To store user authentication tokens securely on the server.",
            "For real-time, persistent client-side data without a backend dependency.",
            "To cache third-party API responses for quicker access across sessions.",
            "To manage server-side session information and user preferences."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, which combination of technologies was primarily used to build the API system and store cryptocurrency data?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "Node.js",
            "Express.js",
            "MongoDB"
          ],
          "options": [
            "Python with PostgreSQL.",
            "Express.js with Redis for caching.",
            "Node.js, Express.js, and MongoDB.",
            "PHP with MySQL for data persistence."
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In DataAlchemist, virtualized rendering was implemented for tables with 1,000+ rows. What problem does this technique primarily solve in Next.js applications?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "performance"
          ],
          "options": [
            "Reducing the initial bundle size for faster page load times.",
            "Improving SEO by ensuring all content is pre-rendered on the server.",
            "Optimizing performance by rendering only visible rows, rather than all data at once.",
            "Ensuring data consistency across multiple user sessions through a single source of truth."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In the CryptoMetrics backend, NATS pub-sub messaging was employed. What was its key role for broadcasting updates to services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "real-time"
          ],
          "options": [
            "To queue expensive computations for later batch processing.",
            "Enabling near real-time, decoupled communication for data updates between services.",
            "Persisting all messages to disk for long-term audit trails and recovery.",
            "Securing API endpoints with encrypted communication channels."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "The MangaFlow Chrome extension utilized Manifest V3 and background service workers. How did this specifically contribute to an efficient and extensible event-driven architecture?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Chrome Extensions API",
            "Manifest V3",
            "background service workers",
            "event-driven architecture"
          ],
          "options": [
            "It allowed synchronous network requests from content scripts, simplifying data fetching.",
            "Service workers handle events and are terminated when idle, efficiently managing resources and extending functionality.",
            "Manifest V3 mandated all logic to run within the main content script, enhancing security and reducing attack surface.",
            "It enabled direct and unrestricted DOM manipulation of external websites without content script injection."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "In DataAlchemist, the Google Gemini API converted natural language rules into executable logic. How did this integration specifically reduce validation errors in CSV-based workflows?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "Google Gemini API",
            "natural language",
            "executable logic",
            "validation errors",
            "CSV"
          ],
          "options": [
            "By automatically correcting syntax errors and inconsistencies within the uploaded CSV files.",
            "By translating complex, user-defined natural language rules into precise, machine-executable logic, minimizing human misinterpretation.",
            "By enforcing strict data type conversions and schema validation during the initial CSV parsing stage.",
            "By providing a visual drag-and-drop interface for users to manually validate each rule against sample data."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759344768824": {
      "id": "s_1759344768824",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, which library did Prajwal integrate to effectively visualize mood trends and psychological symbol analysis data?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "Chart.js"
          ],
          "options": [
            "D3.js",
            "Chart.js",
            "P5.js",
            "Three.js"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, developed with Node.js and Express.js, which database was utilized to persistently store real-time crypto asset metrics?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "Node.js",
            "Express.js",
            "MongoDB"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "Redis"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "To efficiently handle the display of 1,000+ rows within the responsive interface of DataAlchemist, built with Next.js and Tailwind CSS, what rendering technique was applied?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "Next.js",
            "Tailwind CSS",
            "virtualized rendering"
          ],
          "options": [
            "Server-Side Rendering (SSR)",
            "Client-Side Paging",
            "Virtualized Rendering",
            "Infinite Scrolling with Throttling"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In the CryptoMetrics backend, how did Prajwal implement near real-time broadcasting of crypto data updates to various subscribing services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub messaging"
          ],
          "options": [
            "RESTful polling endpoints",
            "WebSockets with direct connections",
            "NATS pub-sub messaging",
            "Redis Streams"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "In DataAlchemist, Prajwal integrated the Google Gemini API with Papa Parse. What was the primary function of the Gemini API in streamlining CSV-based workflows?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "Google Gemini API",
            "Papa Parse",
            "natural language",
            "TypeScript"
          ],
          "options": [
            "Generating synthetic CSV data for testing purposes.",
            "Converting uploaded CSVs into different data formats.",
            "Transforming natural language rules into executable logic.",
            "Automatically fixing parsing errors identified by Papa Parse."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "For CryptoMetrics, to maintain data freshness and handle API rate limits from CoinGecko, what specific backend strategy was employed using cron and Linux tools?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "cron-based syncing",
            "retry logic",
            "API rate limits",
            "Linux"
          ],
          "options": [
            "Real-time WebSockets with a proprietary rate limiting algorithm.",
            "Distributed caching layers with background refresh processes.",
            "Cron-based syncing with implemented retry logic for API requests.",
            "Manual intervention and ad-hoc script execution for data updates."
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759344957087": {
      "id": "s_1759344957087",
      "candidate": {
        "name": "John Doe",
        "email": "youremail@yourdomain.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For the Multi-User Drawing Tool, what was the primary use of MFC in its development?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MFC",
            "Multi-User Drawing Tool",
            "C++"
          ],
          "options": [
            "Database management",
            "UI component rendering",
            "Network communication",
            "Algorithm optimization"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "In your Microsoft internship, SQL and Perl scripts automated what task with large datasets from legacy systems?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "SQL",
            "Perl",
            "legacy systems",
            "data processing"
          ],
          "options": [
            "Frontend UI generation",
            "Database schema design",
            "Data extraction and processing",
            "Cloud infrastructure deployment"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "What was a key aspect of your work designing the UI for the VS open file switcher?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "UI design",
            "VS",
            "file switcher",
            "Ctrl-Tab"
          ],
          "options": [
            "Implementing advanced data encryption",
            "Extending functionality to tool windows",
            "Optimizing database queries",
            "Developing server-side APIs"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "What was a key challenge when redesigning the iChat file format and integrating it with Spotlight Search?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "chat file format",
            "backward compatibility",
            "Spotlight Search"
          ],
          "options": [
            "Optimizing SQL query performance",
            "Ensuring backward compatibility for search",
            "Designing the metadata GUI",
            "Securing network protocols"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "Your prediction algorithm reduced buddy list render time by 75% at Apple. What was the most likely mechanism for this improvement?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "prediction algorithm",
            "buddy lists",
            "performance",
            "Apple"
          ],
          "options": [
            "Pre-fetching user data",
            "Optimizing UI thread rendering",
            "Re-indexing the user database",
            "Compressing network payloads"
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "For the gradient service across VS and its add-ins, what performance challenge would caching primarily address?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "VS",
            "gradients",
            "caching",
            "performance",
            "service"
          ],
          "options": [
            "Slow data retrieval from backend servers",
            "Repetitive computation of gradient values",
            "Network latency for UI assets",
            "Database query optimization"
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759345156528": {
      "id": "s_1759345156528",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the 'Payment Gateway Standalone' project, Prajwal implemented REST endpoints using which specific framework?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway Standalone",
            "RESTful APIs",
            "Spring Boot"
          ],
          "options": [
            "Spring Boot",
            "Node.js",
            "React.js",
            "J2EE"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "Which JavaScript library, listed in Prajwal's technical skills, is primarily used for building dynamic user interfaces?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React.js",
            "JavaScript",
            "Libraries",
            "User Interfaces"
          ],
          "options": [
            "Node.js",
            "Spring Boot",
            "React.js",
            "Hibernate"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "For the 'Library Management System', Prajwal applied TDD using JUnit to which specific part of the application?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Library Management System",
            "TDD",
            "JUnit",
            "Core service logic"
          ],
          "options": [
            "Core service logic",
            "Database schema design",
            "UI component rendering",
            "API documentation with Swagger"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "In the 'Event-Driven Order Processing System', what mechanism was crucial for ensuring at-least-once message processing reliability with Kafka?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "at-least-once processing",
            "consumer groups",
            "idempotency"
          ],
          "options": [
            "Consumer groups and idempotency",
            "Synchronous HTTP callbacks",
            "Direct database transactions",
            "Manual message re-queuing"
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "Regarding the 'Real-Time Messaging Application', what are the distinct roles of STOMP and SockJS in enabling real-time client communication?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Real-Time Messaging Application",
            "WebSocket",
            "STOMP",
            "SockJS",
            "Real-time communication"
          ],
          "options": [
            "STOMP for message protocol, SockJS for fallback",
            "STOMP for secure encryption, SockJS for load balancing",
            "Both handle message persistence to MongoDB",
            "Both manage user authentication via Redis"
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "To handle failed events in the 'Event-Driven Order Processing System', Prajwal implemented which combination of resilience strategies?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Order Processing System",
            "retry/backoff strategies",
            "dead-letter topics",
            "Apache Kafka"
          ],
          "options": [
            "Retry/backoff strategies and dead-letter topics",
            "Immediate re-queuing to the main topic",
            "Manual administrator intervention and email alerts",
            "Synchronous rollback mechanisms"
          ],
          "correctIndex": 0
        }
      ],
      "answers": []
    },
    "s_1759345726672": {
      "id": "s_1759345726672",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, which framework was primarily utilized to develop the responsive user interface and manage application state?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "Next.js",
            "frontend"
          ],
          "options": [
            "Next.js",
            "React.js",
            "Node.js",
            "Express.js"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics project, which specific database technology was chosen by Prajwal to store the collected cryptocurrency metrics?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "database"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "SQLite"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "Reverie Diary managed persistent client-side data without a backend. Which browser API was used for this real-time data storage?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Reverie Diary",
            "LocalStorage",
            "client-side data"
          ],
          "options": [
            "SessionStorage",
            "IndexedDB",
            "Web SQL Database",
            "LocalStorage"
          ],
          "correctIndex": 3
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, what specific pub-sub messaging system was employed to broadcast real-time crypto data updates to services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub"
          ],
          "options": [
            "RabbitMQ",
            "Apache Kafka",
            "NATS",
            "Redis Pub/Sub"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "DataAlchemist efficiently renders 1,000+ rows. What technique was used to achieve performant display of large datasets in the UI?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "performance"
          ],
          "options": [
            "Server-side pagination",
            "Client-side filtering",
            "Infinite scrolling without cleanup",
            "Virtualized rendering"
          ],
          "correctIndex": 3
        },
        {
          "id": "6",
          "text": "To maintain data freshness and handle CoinGecko API rate limits in CryptoMetrics, what specific backend strategy was implemented?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron",
            "retry logic",
            "API rate limits"
          ],
          "options": [
            "Using WebSockets for continuous push updates",
            "Employing serverless functions with queues",
            "Cron-based syncing with retry logic",
            "Manually refreshing data upon request"
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759346313236": {
      "id": "s_1759346313236",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway project, which HTTP method would typically be used for creating a new payment resource?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway",
            "RESTful APIs",
            "Spring Boot"
          ],
          "options": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the Library Management System, which technology was utilized for Object-Relational Mapping (ORM) with MySQL?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "Hibernate",
            "MySQL",
            "ORM"
          ],
          "options": [
            "JDBC",
            "MyBatis",
            "Hibernate",
            "JPA without Hibernate"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System, which concept ensures an event's state changes are applied only once, even if received multiple times?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven System",
            "Apache Kafka",
            "Idempotency",
            "at-least-once processing"
          ],
          "options": [
            "Consumer offsets",
            "Idempotency",
            "Dead-letter topics",
            "At-least-once delivery"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "For the Real-Time Messaging application, what is the key benefit of configuring SockJS as a fallback for WebSocket connections?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Real-Time Messaging",
            "WebSocket",
            "STOMP",
            "SockJS"
          ],
          "options": [
            "Provides message encryption",
            "Enables older browser compatibility",
            "Manages STOMP frame parsing",
            "Offers server-side load balancing"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "To implement custom business metrics for observability in the Event-Driven Order Processing System, what Spring Boot component is primarily used?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven System",
            "Microservices",
            "Spring Boot",
            "observability",
            "metrics",
            "Docker"
          ],
          "options": [
            "HealthIndicator beans",
            "MeterRegistry",
            "JMX MBeans",
            "Logback appenders"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "If a React.js frontend were to connect to your Real-Time Messaging app's STOMP endpoint, which library or approach would be most suitable?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React.js",
            "WebSocket (STOMP)",
            "SockJS",
            "Real-Time Messaging"
          ],
          "options": [
            "Using Fetch API directly",
            "A dedicated STOMP.js client library",
            "A generic HTTP client like Axios",
            "WebRTC data channels"
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759346521855": {
      "id": "s_1759346521855",
      "candidate": {
        "name": "John Doe",
        "email": "youremail@yourdomain.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "What core aspect of UI development did you focus on when designing the VS open file switcher, as per your experience?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "UI",
            "VS",
            "design"
          ],
          "options": [
            "User experience design",
            "Backend API integration",
            "Database schema optimization",
            "Server deployment strategies"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "Which technologies were primarily used for automating large dataset extraction and processing from legacy systems?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "SQL",
            "Perl",
            "legacy systems",
            "data extraction"
          ],
          "options": [
            "SQL and Perl scripts",
            "C++ and MFC framework",
            "C# and .NET platform",
            "Java and JavaScript libraries"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "What was the primary technical outcome of implementing a prediction algorithm for user buddy lists at Apple?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "prediction algorithm",
            "performance",
            "buddy lists"
          ],
          "options": [
            "75% reduction in rendering time",
            "New UI animation effects",
            "Simplified search database schema",
            "Automated system-wide backups"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "For the Synchronized Desktop Calendar using C#, .NET, and SQL, what was key to enabling globally shared calendars?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Synchronized Desktop Calendar",
            "SQL",
            ".NET",
            "shared calendars"
          ],
          "options": [
            "A robust backend with SQL for persistent shared state",
            "Client-side rendering with C# and XML only",
            "Local file system caching for all users",
            "Static HTML pages for calendar views"
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "Reducing method similarity computation from O(n^2) to O(n log n) implies what about the algorithm's structural change?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "O(n^2)",
            "O(n log n)",
            "algorithm optimization",
            "complexity"
          ],
          "options": [
            "Shifted to a more efficient sorting or divide-and-conquer approach",
            "Utilized a distributed computing framework",
            "Increased server-side memory allocation significantly",
            "Switched from a relational to a NoSQL database"
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "What was a significant technical challenge in optimizing gradient rendering performance using a caching service for VS add-ins?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "caching",
            "service",
            "VS add-ins",
            "performance"
          ],
          "options": [
            "Ensuring cache invalidation and consistency across multiple consumers",
            "Designing an intuitive graphical user interface for gradients",
            "Reducing the payload size of client-side images and assets",
            "Managing real-time user input for dynamic gradient adjustments"
          ],
          "correctIndex": 0
        }
      ],
      "answers": []
    },
    "s_1759349010491": {
      "id": "s_1759349010491",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway Standalone project, which Spring Boot annotation is typically used to define a class that handles incoming REST requests?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway Standalone",
            "Spring Boot",
            "RESTful APIs"
          ],
          "options": [
            "@Service",
            "@Repository",
            "@RestController",
            "@Component"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For the Real-Time Messaging Application, what is a primary use case for Redis, as listed in your skills, beyond basic persistence?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Real-Time Messaging Application",
            "Redis"
          ],
          "options": [
            "Relational data storage for chat history",
            "Message queuing system for asynchronous processing",
            "Caching frequently accessed data or session state",
            "Full-text search indexing for messages"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In your Event-Driven Order Processing System, how did you ensure idempotency for consumers processing Kafka events, considering at-least-once delivery?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "idempotency",
            "consumer groups"
          ],
          "options": [
            "By configuring Kafka consumers to disable retries automatically.",
            "By designing consumer logic to safely re-process events using unique identifiers.",
            "By relying solely on Kafka's offset management for guaranteed single processing.",
            "By using an 'at-most-once' delivery guarantee for all events."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "For the Library Management System, when optimizing paginated search APIs with filters, how would you best use Hibernate and MySQL?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Library Management System",
            "Hibernate",
            "MySQL",
            "paginated search",
            "DB indexes"
          ],
          "options": [
            "Performing full table scans for each filter to ensure data freshness.",
            "Creating appropriate DB indexes and leveraging Hibernate's Criteria API for dynamic queries.",
            "Ignoring DB indexes and relying solely on Hibernate's first-level cache for performance.",
            "Using `EntityManager.persist()` for every search query to re-fetch entities."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In the Real-Time Messaging Application, how would RabbitMQ, if used as mentioned, integrate with your STOMP WebSocket setup to facilitate message broadcasting?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Real-Time Messaging Application",
            "WebSocket (STOMP)",
            "SockJS",
            "RabbitMQ",
            "message broker"
          ],
          "options": [
            "RabbitMQ would replace the WebSocket server, handling direct client connections.",
            "Spring's WebSocket message broker would forward messages to RabbitMQ for fan-out to subscribed clients.",
            "RabbitMQ would only be used for storing chat history, not for real-time message delivery.",
            "STOMP clients would directly connect to RabbitMQ queues without a Spring Boot intermediary."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "In your Event-Driven Order Processing system, what's the primary purpose of a dead-letter topic combined with retry/backoff strategies for failed events?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Order Processing System",
            "Microservices",
            "retry/backoff",
            "dead-letter topics",
            "failed events"
          ],
          "options": [
            "To immediately discard all events that cause an initial error, preventing retries.",
            "To store events that consistently fail after retries for manual inspection and reprocessing.",
            "To increase the throughput of event processing by skipping comprehensive error handling.",
            "To ensure strict 'at-most-once' delivery for every event in the system."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759349922287": {
      "id": "s_1759349922287",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Prajwal built DataAlchemist's responsive interface using which styling framework, also handling efficient rendering for 1,000+ rows?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Next.js",
            "Tailwind CSS",
            "DataAlchemist",
            "virtualized rendering"
          ],
          "options": [
            "Chart.js",
            "Tailwind CSS",
            "P5.js",
            "Three.js"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "In the CryptoMetrics project, which NoSQL database did Prajwal utilize to store real-time cryptocurrency metrics?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "MySQL",
            "MongoDB",
            "LocalStorage",
            "NATS"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "The MangaFlow Chrome extension uses Manifest V3. What architectural component does V3 primarily leverage for background processing, impacting event handling?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Chrome extension",
            "Manifest V3",
            "background service workers"
          ],
          "options": [
            "Web Workers",
            "Shared Workers",
            "Background Service Workers",
            "Dedicated Workers"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "For the CryptoMetrics backend, Prajwal used NATS. What was the primary communication pattern NATS provided for broadcasting real-time crypto updates?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub messaging"
          ],
          "options": [
            "Request-Reply",
            "Client-Server",
            "Publish-Subscribe",
            "Remote Procedure Call"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "In DataAlchemist, Prajwal implemented virtualized rendering for displaying 1,000+ CSV rows. What key performance challenge does this technique address?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "1,000+ rows",
            "performance"
          ],
          "options": [
            "Reducing server-side data fetching",
            "Minimizing network latency for large payloads",
            "Improving DOM rendering performance and memory usage for long lists",
            "Ensuring data consistency across multiple clients"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "The CryptoMetrics backend employed cron-based syncing with retry logic for the CoinGecko API. What is the primary combined purpose of these two strategies?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron-based syncing",
            "retry logic",
            "CoinGecko API",
            "rate limits"
          ],
          "options": [
            "To distribute load across multiple API endpoints",
            "To improve database query performance and indexing",
            "To ensure data freshness and robustly handle external API failures/rate limits",
            "To enable real-time bidirectional communication with clients"
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759350224508": {
      "id": "s_1759350224508",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what approach enabled the efficient display and handling of 1,000+ CSV rows in the UI?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "Virtualized rendering",
            "Next.js",
            "Tailwind CSS"
          ],
          "options": [
            "Virtualized rendering techniques",
            "Server-side pagination via Next.js",
            "Tailwind CSS utility classes",
            "Direct DOM manipulation with vanilla JS"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, which technology was employed to broadcast real-time data updates to subscribed services?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "Node.js"
          ],
          "options": [
            "Direct HTTP long polling",
            "NATS pub-sub messaging",
            "Express.js middleware",
            "MongoDB change streams"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "MangaFlow adopted Manifest V3 for its Chrome Extension. What is a key architectural characteristic promoted by V3, distinguishing it from V2?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Chrome Extensions API",
            "JavaScript",
            "service workers"
          ],
          "options": [
            "Relying on persistent background pages for state",
            "Encouraging synchronous API calls for UI updates",
            "Shifting to event-driven service workers for background tasks",
            "Deprecating all declarative net request rules"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, how were the challenges of maintaining data freshness from the CoinGecko API and handling potential rate limits addressed?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "cron",
            "rate limits",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "Implementing continuous, high-frequency polling",
            "Manual data synchronization via an admin interface",
            "Cron-based syncing with built-in retry logic",
            "Client-side data caching without server intervention"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "DataAlchemist translates natural language rules into executable logic for CSV processing. How is this conversion primarily facilitated within its tech stack?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "Google Gemini API",
            "Papa Parse",
            "Next.js",
            "TypeScript"
          ],
          "options": [
            "Papa Parse directly interprets natural language expressions",
            "The Google Gemini API processes natural language into structured logic",
            "Next.js server-side rendering handles the linguistic parsing",
            "Hardcoded JavaScript functions cover all possible rule variations"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "CryptoMetrics used NATS pub-sub for broadcasting updates. What fundamental advantage does this provide compared to a traditional request/response model for such a system?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "real-time",
            "MongoDB",
            "Express.js"
          ],
          "options": [
            "Guaranteed transactional integrity across all subscribers",
            "Simplifying synchronous data retrieval for individual clients",
            "Decoupling producers from consumers for efficient fan-out and scalability",
            "Ensuring strict message ordering and persistence for every event"
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759350268191": {
      "id": "s_1759350268191",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what primary technique did you use to efficiently display 1,000+ rows of data in the responsive interface?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "Tailwind CSS"
          ],
          "options": [
            "Server-Side Rendering for all rows",
            "Client-side pagination",
            "Virtualized rendering",
            "Infinite scrolling"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For CryptoMetrics, what was the primary purpose of integrating the CoinGecko API into your Node.js and Express.js backend system?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "User authentication and authorization",
            "Displaying targeted advertisements",
            "Sourcing real-time crypto data like price and market cap",
            "Managing user portfolios and transactions"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "Your MangaFlow extension used Manifest V3 background service workers. What key advantage do these offer for an efficient event-driven architecture?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers",
            "event-driven architecture"
          ],
          "options": [
            "Direct DOM manipulation on remote websites",
            "Persistent background processes consuming minimal resources",
            "Encapsulated, short-lived event handlers that wake on demand",
            "Real-time database synchronization with content scripts"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, you employed NATS pub-sub messaging. What specific problem did this solve for broadcasting updates to services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub messaging",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "Establishing direct HTTP connections between clients and server",
            "Relaying messages reliably to multiple subscribed services in near real-time",
            "Storing historical crypto data in a persistent queue",
            "Authenticating incoming requests from microservices"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "For Reverie Diary, you used LocalStorage for real-time, persistent client-side data without a backend. What's a significant security or scalability concern?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Reverie Diary",
            "LocalStorage",
            "client-side data",
            "React.js",
            "Tailwind CSS"
          ],
          "options": [
            "Limited storage capacity (typically 5-10MB per origin)",
            "Data is not encrypted by default and can be easily accessed by malicious scripts",
            "Complex asynchronous API makes it difficult to manage data",
            "Inability to store structured JSON objects directly"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "To maintain data freshness and handle CoinGecko API rate limits in CryptoMetrics, you implemented cron-based syncing with retry logic. What is its critical benefit?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron-based syncing",
            "retry logic",
            "CoinGecko API",
            "API rate limits",
            "Node.js"
          ],
          "options": [
            "Allows manual data updates only when specifically triggered by an administrator",
            "Ensures consistent data availability by re-fetching on failure and spacing requests",
            "Distributes data across multiple MongoDB instances for horizontal scaling",
            "Provides immediate, real-time data push to all connected clients without polling"
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759351551728": {
      "id": "s_1759351551728",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what technologies did Prajwal use for the responsive UI and efficient rendering of 1,000+ rows?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Next.js",
            "Tailwind CSS",
            "virtualized rendering",
            "DataAlchemist"
          ],
          "options": [
            "Next.js and Tailwind CSS with virtualized rendering.",
            "React.js and Material-UI for responsive layouts.",
            "Vue.js and Bootstrap for fast component loading.",
            "Angular and custom CSS frameworks."
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "Which database technology did Prajwal use in CryptoMetrics to store real-time crypto metrics like price and market cap?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics",
            "database"
          ],
          "options": [
            "MongoDB",
            "MySQL",
            "PostgreSQL",
            "Redis"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "For Reverie Diary, which client-side storage mechanism did Prajwal utilize to ensure real-time, persistent data without a backend?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Reverie Diary",
            "LocalStorage",
            "client-side data"
          ],
          "options": [
            "LocalStorage",
            "IndexedDB",
            "SessionStorage",
            "Web SQL Database"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, Prajwal employed a specific messaging system for broadcasting real-time updates to services. Which one was it?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NATS",
            "pub-sub messaging",
            "CryptoMetrics"
          ],
          "options": [
            "NATS pub-sub messaging",
            "RabbitMQ message queues",
            "Apache Kafka streams",
            "AWS SQS queues"
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "Prajwal developed MangaFlow using Manifest V3. What architectural change does this manifest version primarily promote for event handling?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers",
            "Chrome Extensions API"
          ],
          "options": [
            "Transitioning from persistent background pages to event-driven service workers.",
            "Requiring all network requests to go through a content script.",
            "Strictly enforcing the use of WebAssembly for performance.",
            "Eliminating all forms of client-side storage for security."
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "How did Prajwal ensure data freshness and handle API rate limits for the CoinGecko API in CryptoMetrics?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "cron-based syncing",
            "retry logic",
            "API rate limits"
          ],
          "options": [
            "Implemented cron-based syncing with retry logic to manage rate limits.",
            "Used WebSockets for instant, continuous data streams without limits.",
            "Purchased a premium CoinGecko API subscription for higher limits.",
            "Leveraged client-side caching extensively to reduce API calls."
          ],
          "correctIndex": 0
        }
      ],
      "answers": []
    },
    "s_1759351810385": {
      "id": "s_1759351810385",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "2",
          "text": "For the CryptoMetrics backend system, what was NATS pub-sub messaging specifically employed for?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "NATS",
            "CryptoMetrics",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "Storing historical cryptocurrency metrics in MongoDB.",
            "Providing a RESTful API endpoint for client applications.",
            "Broadcasting real-time data updates to various subscribed services.",
            "Scheduling cron-based jobs for data collection."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In DataAlchemist, what was the specific purpose of integrating the Google Gemini API into the platform?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Google Gemini API",
            "DataAlchemist",
            "TypeScript",
            "Papa Parse"
          ],
          "options": [
            "Generating automated UI test cases for different user workflows.",
            "Converting natural language rules from users into executable logic for task allocation.",
            "Virtualizing large CSV datasets to improve data display speed.",
            "Managing user authentication and authorization flows securely."
          ],
          "correctIndex": 1
        },
        {
          "id": "1",
          "text": "In DataAlchemist, what was the primary benefit of implementing virtualized rendering to efficiently handle 1,000+ rows?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Next.js",
            "virtualized rendering",
            "DataAlchemist",
            "Tailwind CSS"
          ],
          "options": [
            "Enabling complex SQL queries directly on large CSV data.",
            "Reducing initial load time and improving scroll performance for large datasets.",
            "Securing sensitive data within the client-side interface.",
            "Automating CSV parsing rules with Papa Parse."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "For CryptoMetrics, implementing cron-based syncing and retry logic to collect CoinGecko API data primarily addressed what challenge?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CoinGecko API",
            "cron",
            "retry logic",
            "API rate limits",
            "CryptoMetrics",
            "Node.js"
          ],
          "options": [
            "Ensuring secure transmission of crypto data to MongoDB.",
            "Efficiently broadcasting data updates via NATS pub-sub messaging.",
            "Maintaining data freshness and effectively handling external API rate limits.",
            "Deploying the Node.js application to a Linux environment using PM2."
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "The MangaFlow Chrome extension adopted Manifest V3 and background service workers. What was a key architectural shift for background processes compared to Manifest V2?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Manifest V3",
            "Chrome Extensions API",
            "background service workers",
            "MangaFlow"
          ],
          "options": [
            "Moving from event pages to persistent background scripts for continuous operation.",
            "Replacing XMLHttpRequest with the Fetch API for all network requests by default.",
            "Shifting from persistent background pages to event-driven, non-persistent service workers.",
            "Enforcing stricter Content Security Policies (CSP) for all external script inclusions."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "What is a significant limitation or consideration when relying solely on LocalStorage, as in Reverie Diary, for persistent client-side data?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "LocalStorage",
            "Reverie Diary",
            "React.js",
            "client-side data"
          ],
          "options": [
            "It requires a continuous internet connection for data access and persistence.",
            "Data stored is automatically synced and accessible across all user devices.",
            "It's limited to storing stringified data and lacks built-in complex query capabilities.",
            "Data automatically expires after a browser session ends, requiring re-entry."
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759352000076": {
      "id": "s_1759352000076",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what was the primary reason for implementing virtualized rendering for CSV data?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "Next.js",
            "virtualized rendering",
            "TypeScript",
            "Tailwind CSS"
          ],
          "options": [
            "A) To reduce server load on the backend.",
            "B) To enable real-time updates from external APIs.",
            "C) To efficiently display and scroll through 1,000+ rows of data.",
            "D) To improve the application's Search Engine Optimization (SEO)."
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, what was the main role of NATS pub-sub messaging in the system architecture?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "Node.js",
            "Express.js",
            "NATS",
            "pub-sub"
          ],
          "options": [
            "A) Storing historical crypto asset data in MongoDB.",
            "B) Broadcasting real-time data updates to subscribed services.",
            "C) Authenticating requests to the CoinGecko API.",
            "D) Scheduling cron-based jobs for data collection."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In the MangaFlow Chrome extension, why were Manifest V3 and background service workers crucial for its event-driven architecture?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "JavaScript",
            "Chrome Extensions API",
            "Manifest V3",
            "background service workers"
          ],
          "options": [
            "A) To directly manipulate the DOM of cross-origin manga sites.",
            "B) To provide a persistent UI when the browser is closed.",
            "C) To align with Chrome's updated security model and enable efficient event handling.",
            "D) To enable synchronous network requests for auto-scrolling."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In DataAlchemist, how did the integration of Google Gemini API with natural language rules reduce validation errors in CSV workflows?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "Google Gemini API",
            "Papa Parse",
            "TypeScript",
            "Next.js"
          ],
          "options": [
            "A) It automatically corrected syntax in uploaded CSV files.",
            "B) It converted natural language rules into executable logic for parsing.",
            "C) It pre-validated the entire CSV structure before processing.",
            "D) It provided real-time feedback on API call failures."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "For CryptoMetrics, how did the combination of cron-based syncing and retry logic effectively manage data freshness and CoinGecko API rate limits?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "Node.js",
            "Express.js",
            "MongoDB",
            "CoinGecko API",
            "cron-based job schedulers",
            "retry logic"
          ],
          "options": [
            "A) By distributing API calls across multiple IP addresses.",
            "B) By delaying all requests until off-peak hours.",
            "C) By ensuring regular data updates while gracefully handling temporary API restrictions.",
            "D) By pre-caching all possible crypto data beforehand."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In DataAlchemist, describe the interaction between Papa Parse, Google Gemini API, and virtualized rendering when a user uploads a CSV.",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "Next.js",
            "TypeScript",
            "Papa Parse",
            "Google Gemini API",
            "virtualized rendering",
            "CSV"
          ],
          "options": [
            "A) Gemini processes CSV, Papa Parse renders it, then virtualized rendering interprets rules.",
            "B) Papa Parse extracts CSV data, Gemini converts rules to logic, then data is displayed efficiently.",
            "C) Virtualized rendering handles CSV upload, Papa Parse calls Gemini, then data is parsed.",
            "D) Papa Parse calls Gemini, Gemini handles rendering, then virtualized rendering parses CSV."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759352114346": {
      "id": "s_1759352114346",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Reverie Diary project, which library was used to visualize mood trends and psychological symbol analysis?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "Chart.js",
            "mood trends"
          ],
          "options": [
            "Chart.js",
            "Three.js",
            "P5.js",
            "D3.js"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For your CryptoMetrics backend system, what database was chosen to store metrics like price and market cap for crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "metrics"
          ],
          "options": [
            "MongoDB",
            "MySQL",
            "PostgreSQL",
            "SQLite"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "In MangaFlow, using Manifest V3 and background service workers facilitated what type of architecture for the extension?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "service workers",
            "architecture"
          ],
          "options": [
            "Event-driven architecture",
            "Serverless architecture",
            "Microservices architecture",
            "Monolithic architecture"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "How did the implementation of NATS pub-sub messaging specifically benefit the CryptoMetrics backend system?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "real-time"
          ],
          "options": [
            "By broadcasting updates to services in near real-time.",
            "By authenticating API requests securely.",
            "By storing historical crypto data efficiently.",
            "By managing cron-based job schedules."
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "DataAlchemist efficiently handles 1,000+ CSV rows. What is the core advantage of virtualized rendering in managing such a large dataset?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "1,000+ rows"
          ],
          "options": [
            "Optimizing performance by rendering only visible rows, reducing DOM load.",
            "Enabling server-side pagination for all data requests.",
            "Caching all 1,000+ rows in client-side memory.",
            "Facilitating complex data transformations before display."
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "How did your CryptoMetrics backend ensure data freshness and handle CoinGecko API rate limits effectively?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "rate limits",
            "freshness",
            "cron",
            "retry logic"
          ],
          "options": [
            "Implementing cron-based syncing with retry logic.",
            "Using a distributed cache with a short TTL.",
            "Directly negotiating higher rate limits with CoinGecko.",
            "Storing all historical data directly in memory."
          ],
          "correctIndex": 0
        }
      ],
      "answers": []
    },
    "s_1759354395786": {
      "id": "s_1759354395786",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what combination of technologies was used to build the responsive interface and handle styling?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "Next.js",
            "TypeScript",
            "Tailwind CSS",
            "virtualized rendering"
          ],
          "options": [
            "React.js and CSS-in-JS",
            "Next.js and Tailwind CSS",
            "HTML/CSS with Bootstrap",
            "P5.js and custom CSS"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For CryptoMetrics, which database was used to store metrics like price, market cap, and volume for crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "Cassandra"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "The MangaFlow Chrome extension used Manifest V3. What key architectural change does Manifest V3 introduce for background scripts?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Chrome Extensions API",
            "background service workers",
            "JavaScript"
          ],
          "options": [
            "Allows only persistent background pages.",
            "Replaces background pages with event-driven service workers.",
            "Requires all background logic to be inline in the manifest.",
            "Eliminates the need for any background processes."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, what was the primary purpose of employing NATS pub-sub messaging?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "Node.js",
            "Express.js",
            "CoinGecko API"
          ],
          "options": [
            "To manage database transactions across distributed systems.",
            "To broadcast real-time crypto data updates to subscribed services.",
            "To authenticate client requests to the backend API.",
            "To cache frequently accessed crypto data locally."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "DataAlchemist implemented virtualized rendering for handling 1,000+ rows. What is the primary performance benefit of this technique?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "Tailwind CSS"
          ],
          "options": [
            "Reduces API call frequency by caching data.",
            "Minimizes DOM manipulation by rendering only visible rows.",
            "Improves server-side rendering speeds for initial load.",
            "Compresses transferred data size from the backend."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "For CryptoMetrics, what was the strategic reason behind implementing cron-based syncing and retry logic with the CoinGecko API?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron-based syncing",
            "retry logic",
            "CoinGecko API",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "To enable server-side rendering for improved SEO.",
            "To ensure data freshness and robustly handle API rate limits/failures.",
            "To provide real-time bidding for crypto assets.",
            "To secure data transmission using end-to-end encryption."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759354608204": {
      "id": "s_1759354608204",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what was the primary framework used for styling the responsive interface and ensuring an appealing user experience?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "Tailwind CSS",
            "responsive interface"
          ],
          "options": [
            "Tailwind CSS",
            "P5.js",
            "Chart.js",
            "Bootstrap"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics project, which NoSQL database was chosen to efficiently store real-time metrics for 50+ crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "database",
            "crypto assets"
          ],
          "options": [
            "MySQL",
            "MongoDB",
            "PostgreSQL",
            "SQLite"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In DataAlchemist, how did you ensure efficient display and smooth interaction when handling a large volume of data, specifically 1,000+ rows?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "1,000+ rows"
          ],
          "options": [
            "Server-side pagination",
            "Client-side caching with LocalStorage",
            "Virtualized rendering",
            "Pre-rendering all rows on build"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "To broadcast near real-time crypto data updates to various interconnected services within the CryptoMetrics backend, which messaging system was employed?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub messaging",
            "real-time updates"
          ],
          "options": [
            "RabbitMQ",
            "Apache Kafka",
            "NATS pub-sub",
            "ZeroMQ"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "MangaFlow utilized Manifest V3. What specific architectural component enabled its efficient, event-driven operations as a Chrome Extension, replacing persistent background pages?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers",
            "Chrome Extensions API"
          ],
          "options": [
            "Content scripts",
            "Extension pages",
            "Background service workers",
            "Web Workers API"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In CryptoMetrics, what was the dual primary purpose of implementing cron-based syncing and retry logic when collecting data from the CoinGecko API?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron-based syncing",
            "retry logic",
            "CoinGecko API",
            "rate limits"
          ],
          "options": [
            "Reduce storage costs and improve query performance",
            "Maintain data freshness and handle API rate limits",
            "Facilitate batch processing and data archiving",
            "Enhance data security and prevent unauthorized access"
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759355388674": {
      "id": "s_1759355388674",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway project, which combination of technologies was primarily used for the core application logic and data persistence?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "MySQL",
            "Payment Gateway",
            "RESTful APIs"
          ],
          "options": [
            "Node.js, MongoDB",
            "Spring Boot, MySQL",
            "React.js, Redis",
            "Python, PostgreSQL"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "What message broker was utilized to achieve event-driven communication between microservices in the Event-Driven Order Processing System?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Apache Kafka",
            "Event-Driven Systems",
            "Microservices"
          ],
          "options": [
            "RabbitMQ",
            "Redis Pub/Sub",
            "Apache Kafka",
            "JMS"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "For the Real-Time Messaging Application, which technologies were configured for real-time client communication and managing user sessions?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "WebSocket",
            "STOMP",
            "SockJS",
            "Redis",
            "Real-Time Messaging"
          ],
          "options": [
            "RESTful endpoints with polling and RabbitMQ",
            "STOMP WebSockets with SockJS fallback and Redis",
            "HTTP/2 push with Server-Sent Events (SSE)",
            "SOAP services with JMS queues"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "To ensure robust event processing in the Order Processing System, what strategies were implemented for failed events and message delivery?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Systems",
            "Apache Kafka",
            "Retry/backoff",
            "Idempotency",
            "Microservices"
          ],
          "options": [
            "Polling mechanisms and transaction rollbacks",
            "REST API retries and circuit breakers",
            "Retry/backoff, dead-letter topics, and idempotency",
            "Manual intervention and daily batch processing"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "In the Library Management System, what approach was taken to optimize search performance and ensure API quality and maintainability?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Hibernate",
            "DB indexes",
            "TDD",
            "JUnit",
            "Swagger",
            "Library Management System"
          ],
          "options": [
            "Full-text search engine with NoSQL and manual testing.",
            "ORM caching, direct JDBC calls, and Postman scripting.",
            "Optimized queries with DB indexes, TDD with JUnit, and Swagger docs.",
            "Materialized views, stored procedures, and end-to-end UI tests."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "The Event-Driven Order Processing System leveraged Docker. What specific aspects were included for operational stability and insights?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Microservices",
            "Docker",
            "Health endpoints",
            "Metrics endpoints",
            "Observability"
          ],
          "options": [
            "Load balancers and CDN integration.",
            "Health and metrics endpoints for observability.",
            "Serverless functions and API Gateway.",
            "Distributed tracing with Elastic Search."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759355447339": {
      "id": "s_1759355447339",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what was Tailwind CSS primarily used for?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Tailwind CSS",
            "DataAlchemist"
          ],
          "options": [
            "Managing application state efficiently.",
            "Building a responsive and styled user interface.",
            "Performing server-side rendering for speed.",
            "Parsing CSV files from user uploads."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, what was MongoDB's primary role?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics"
          ],
          "options": [
            "Handling pub-sub messaging for updates.",
            "Serving real-time data to clients directly.",
            "Storing crypto asset metrics like price and volume.",
            "Managing API rate limits for CoinGecko."
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "How did DataAlchemist efficiently manage displaying 1,000+ rows in its interface?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering"
          ],
          "options": [
            "By fetching data in small, paginated batches.",
            "Through server-side processing of all rows before display.",
            "By implementing virtualized rendering techniques.",
            "Storing all rows directly in LocalStorage."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In the CryptoMetrics project, how were real-time updates broadcast to services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NATS",
            "CryptoMetrics",
            "pub-sub"
          ],
          "options": [
            "Via direct HTTP API calls from Node.js to each service.",
            "By polling services for new data every second.",
            "Using NATS pub-sub messaging.",
            "Storing updates in MongoDB for services to fetch."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "For the MangaFlow Chrome extension, what did Manifest V3 and background service workers enable?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers"
          ],
          "options": [
            "Securely storing user preferences on a remote server.",
            "Building an efficient, extensible event-driven architecture.",
            "Performing heavy DOM manipulation on every page load.",
            "Directly accessing local file system resources."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "How did DataAlchemist use the Google Gemini API to improve its rule-based parsing?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "Google Gemini API",
            "natural language",
            "executable logic"
          ],
          "options": [
            "Generating dream interpretations from user prompts.",
            "Converting natural language rules into executable logic.",
            "Displaying mood trends with Chart.js visualization.",
            "Automating CSV uploads and download processes."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759355576520": {
      "id": "s_1759355576520",
      "candidate": {
        "name": "",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Next.js e-commerce platform using React, what was the primary role of Redux in managing application state?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Next.js",
            "React",
            "Redux",
            "e-commerce"
          ],
          "options": [
            "Handling local component state",
            "Managing global application state predictably",
            "Optimizing database queries",
            "Styling React components"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For your Python/Django migration to AWS Lambda microservices, what was the main benefit of using SQS for asynchronous processing?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "AWS Lambda",
            "SQS",
            "Microservices",
            "Python/Django"
          ],
          "options": [
            "Real-time database updates",
            "Decoupling services and handling message queues",
            "Directly serving static files",
            "Orchestrating container deployments"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "You implemented a GraphQL API gateway for your Next.js app to reduce over-fetching. How does Apollo Client typically help achieve this in the frontend?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Next.js",
            "GraphQL",
            "Apollo Client",
            "over-fetching"
          ],
          "options": [
            "By pre-rendering all data on the server",
            "Allowing clients to request only needed data fields",
            "Caching all responses indefinitely",
            "Automatically splitting code bundles"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "Your e-commerce platform used NestJS microservices and PostgreSQL. How does NestJS's structure aid in building scalable, performant microservices interacting with a database?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NestJS",
            "PostgreSQL",
            "microservices",
            "e-commerce"
          ],
          "options": [
            "By providing direct SQL injection protection automatically",
            "Enforcing modularity, dependency injection, and clear architecture",
            "Translating all requests to NoSQL queries",
            "Eliminating the need for ORMs or database drivers"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "For the real-time chat feature using WebSockets and Redis, what's a robust strategy for ensuring consistent state updates across React components while managing multiple user connections?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React",
            "WebSockets",
            "Redis",
            "real-time chat",
            "state management"
          ],
          "options": [
            "Polling the backend periodically for new messages",
            "Using a global state management library (e.g., Redux) with WebSocket middleware",
            "Relying solely on local useState for all chat messages",
            "Storing all chat history in browser local storage"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "Given your experience with AWS, Kubernetes, and a GraphQL API gateway, what is a key architectural consideration for ensuring observability and resilience in a distributed microservices ecosystem?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "AWS",
            "Kubernetes",
            "GraphQL API gateway",
            "Microservices",
            "observability",
            "resilience"
          ],
          "options": [
            "Centralizing all logs, metrics, and tracing, with circuit breakers/retries",
            "Storing all state in stateless services",
            "Exclusively using serverless functions for all components",
            "Deploying all microservices as a single Docker image"
          ],
          "correctIndex": 0
        }
      ],
      "answers": []
    },
    "s_1759355710805": {
      "id": "s_1759355710805",
      "candidate": {
        "name": "Test User",
        "email": "test@example.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "As a React developer, what is the primary purpose of JSX in your component structure?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "JSX"
          ],
          "options": [
            "To directly manipulate the browser's DOM.",
            "To define styles for components.",
            "To write HTML-like syntax within JavaScript.",
            "To manage component-level state."
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "A React developer often uses `useState`. What does `useState` return when called?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "useState",
            "Hooks"
          ],
          "options": [
            "The current state value and a function to update it.",
            "Only the initial state value.",
            "A JSX element for rendering.",
            "A reference to the DOM element."
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "As a React developer, which hook helps optimize performance by memoizing expensive function results, preventing recalculation on every render?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "React",
            "performance",
            "useMemo",
            "Hooks"
          ],
          "options": [
            "`useReducer`",
            "`useEffect`",
            "`useMemo`",
            "`useContext`"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "For managing global state in a React application without prop drilling, which built-in feature is commonly used by developers?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "React",
            "Context API",
            "global state",
            "prop drilling"
          ],
          "options": [
            "Redux Toolkit",
            "React's Context API",
            "Local Storage",
            "Component State (useState)"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "As a React developer, you've set up an event listener in `useEffect`. How do you properly clean it up to prevent memory leaks?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React",
            "useEffect",
            "cleanup",
            "memory leaks"
          ],
          "options": [
            "Call `removeEventListener` in the next `useEffect` call.",
            "Return a cleanup function from `useEffect`.",
            "Use `componentWillUnmount` (if using class components).",
            "It's automatically handled by React."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "To gracefully handle JavaScript errors in a React application's UI tree during rendering, which specific pattern would a developer implement?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React",
            "Error Boundaries",
            "error handling",
            "UI tree"
          ],
          "options": [
            "Try-catch blocks around every component.",
            "React Error Boundaries.",
            "`window.onerror` event listener.",
            "Global state management for errors."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759356038382": {
      "id": "s_1759356038382",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, you built a responsive interface with virtualized rendering for 1,000+ rows. What is the primary benefit of virtualized rendering in this context?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "Tailwind CSS"
          ],
          "options": [
            "Reduces the total number of data rows fetched from the server.",
            "Renders only the visible rows, improving performance and memory usage.",
            "Ensures all 1,000+ rows are immediately available for sorting.",
            "Automates the parsing of CSV data with Papa Parse."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For CryptoMetrics, you employed NATS pub-sub messaging to broadcast updates to services. What was the core purpose of NATS?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "To store historical crypto data efficiently in MongoDB.",
            "To enable real-time, decoupled communication between data sources and consumers.",
            "To directly manage CoinGecko API rate limits and retries.",
            "To execute cron-based job schedulers on a Linux environment."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "Your MangaFlow extension utilized Manifest V3 and background service workers. What is a key architectural shift for background logic in Manifest V3?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers",
            "Chrome Extensions API"
          ],
          "options": [
            "Background pages are replaced by always-on, persistent scripts.",
            "Background scripts are now event-driven and terminate when idle.",
            "Content scripts can directly access extension APIs.",
            "The `webRequest` API is completely removed for security reasons."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, your cron-based syncing included retry logic for CoinGecko API to handle rate limits. How would this logic typically handle a `429 Too Many Requests` response?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "cron",
            "retry logic",
            "API rate limits",
            "CoinGecko API"
          ],
          "options": [
            "Immediately block all subsequent requests for 24 hours.",
            "Store the failed request in MongoDB for manual processing.",
            "Implement an exponential backoff strategy before reattempting the request.",
            "Broadcast the error directly to NATS without retrying."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "In DataAlchemist, you used TypeScript and Google Gemini API to convert natural language rules into executable logic. Which TypeScript feature is crucial for type-safely defining this dynamically generated logic structure?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "TypeScript",
            "Google Gemini API",
            "executable logic",
            "type safety",
            "Next.js"
          ],
          "options": [
            "Decorators, to add metadata to classes.",
            "Generics, to create reusable components with varying types.",
            "Interface or type aliases, to define the expected shape of the executable logic.",
            "Namespaces, to organize code into logical groups."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "Considering CryptoMetrics' use of MongoDB and NATS for broadcasting updates, what pattern could ensure data consistency if NATS consumers process updates from MongoDB and a consumer fails mid-processing?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "NATS",
            "data consistency",
            "pub-sub",
            "Node.js"
          ],
          "options": [
            "Relying on NATS's \"at-most-once\" delivery guarantee for all messages.",
            "Implementing idempotent consumers that can safely re-process messages without side effects.",
            "Using MongoDB's change streams to directly push data to consumers, bypassing NATS.",
            "Disabling NATS entirely and fetching all data directly from MongoDB on demand."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759356380855": {
      "id": "s_1759356380855",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, using Chart.js to show mood trends, how would you typically update the chart data after new dream entries are logged?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Chart.js",
            "Reverie Diary",
            "React.js"
          ],
          "options": [
            "Directly manipulate the DOM elements of the chart",
            "Use `chart.data` property and then call `chart.update()`",
            "Completely re-render the Chart.js component every time",
            "Fetch new data and assign it to a global JavaScript variable"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics project, where MongoDB was used to store metrics like price and market cap, what primary type of database is MongoDB?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics",
            "Databases"
          ],
          "options": [
            "Relational Database Management System (RDBMS)",
            "Graph Database",
            "Document Database (NoSQL)",
            "Key-Value Store"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "DataAlchemist implemented virtualized rendering to efficiently handle 1,000+ rows. What key performance issue does virtualization address in this scenario?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "Virtualized Rendering",
            "Next.js",
            "Tailwind CSS"
          ],
          "options": [
            "Reduces API call latency for large datasets",
            "Decreases server-side processing for CSV parsing",
            "Minimizes the number of DOM elements rendered at once",
            "Optimizes database query performance for row retrieval"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "CryptoMetrics used NATS pub-sub messaging to broadcast updates to services in near real-time. What is a key benefit of using a pub-sub system like NATS?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "Ensures synchronous communication between all services",
            "Decouples senders from receivers, improving system scalability",
            "Guarantees ordered message delivery across all subscribers",
            "Simplifies direct HTTP requests between microservices"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "MangaFlow utilized Manifest V3 and background service workers for its event-driven architecture. What is a primary characteristic of service workers in Manifest V3 for extensions?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Chrome Extensions API",
            "JavaScript",
            "service workers"
          ],
          "options": [
            "They enable persistent, long-running background pages indefinitely",
            "They provide a centralized UI framework for extension popups",
            "They are event-driven and can be terminated when idle to save resources",
            "They allow direct modification of any web page DOM from the background"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In CryptoMetrics, cron-based syncing and retry logic were used to handle CoinGecko API rate limits and maintain data freshness. What is a robust pattern for implementing retry logic for transient API failures?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "Node.js",
            "Express.js",
            "API rate limits",
            "retry logic"
          ],
          "options": [
            "Immediately re-attempt the request continuously until success",
            "Implement exponential backoff with jitter between retries",
            "Only retry requests for HTTP 500 status codes without delay",
            "Store failed requests in a queue for manual processing later"
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759357163348": {
      "id": "s_1759357163348",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Reverie Diary project, which client-side storage mechanism was utilized to maintain persistent data without a backend dependency?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "LocalStorage",
            "client-side data"
          ],
          "options": [
            "SessionStorage",
            "IndexedDB",
            "LocalStorage",
            "Web SQL Database"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics project, what NoSQL database was specifically chosen to store real-time metrics such as price and market cap for crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "NoSQL database"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "Redis"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In DataAlchemist, to efficiently manage and display 1,000+ rows within the responsive interface built with Tailwind CSS, what rendering technique was employed?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "Tailwind CSS",
            "virtualized rendering",
            "Next.js"
          ],
          "options": [
            "Server-Side Rendering (SSR)",
            "Client-Side Pagination",
            "Virtualized Rendering",
            "Infinite Scrolling"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "The CryptoMetrics backend utilized NATS pub-sub messaging. What was the primary purpose of this technology in broadcasting updates?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub messaging",
            "real-time updates"
          ],
          "options": [
            "To establish secure peer-to-peer connections",
            "To process batch jobs asynchronously",
            "To broadcast updates to services in near real-time",
            "To manage distributed transactions across microservices"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "MangaFlow's event-driven architecture relies on Manifest V3 background service workers. Which statement best describes a key characteristic of these workers?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers",
            "event-driven architecture"
          ],
          "options": [
            "They maintain a persistent, always-active process for the extension.",
            "They allow direct modification of the active tab's JavaScript context.",
            "They are short-lived, waking up only in response to specific events.",
            "They provide a synchronous API for all Chrome extension functionalities."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In CryptoMetrics, cron-based syncing combined with retry logic was used. What critical backend challenge did this solve when interacting with the CoinGecko API?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron-based syncing",
            "retry logic",
            "CoinGecko API",
            "API rate limits"
          ],
          "options": [
            "Ensuring transactional integrity across data updates.",
            "Balancing data freshness and handling API rate limits.",
            "Optimizing database query performance for large datasets.",
            "Implementing real-time data streaming without polling."
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759358331784": {
      "id": "s_1759358331784",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Reverie Diary project, Prajwal used Tailwind CSS for what primary purpose?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Tailwind CSS",
            "Reverie Diary"
          ],
          "options": [
            "Managing server-side logic",
            "Crafting responsive UI components",
            "Handling database queries",
            "Processing CSV data"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, which database did Prajwal use to store metrics like price and market cap for crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "PostgreSQL",
            "MySQL",
            "MongoDB",
            "Cassandra"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In DataAlchemist, what was the primary benefit of implementing virtualized rendering for CSV data with 1,000+ rows?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "Tailwind CSS"
          ],
          "options": [
            "Reducing server-side computation",
            "Minimizing network latency for data retrieval",
            "Improving UI responsiveness with large datasets",
            "Automating CSV parsing logic with Papa Parse"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, NATS pub-sub messaging was chosen for what specific purpose regarding data updates?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NATS",
            "CryptoMetrics",
            "Node.js"
          ],
          "options": [
            "Storing historical crypto data efficiently",
            "Broadcasting near real-time updates to services",
            "Handling secure user authentication",
            "Managing database schema migrations"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "For MangaFlow, opting for Manifest V3 with background service workers implies what architectural shift compared to Manifest V2?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Chrome Extensions API",
            "JavaScript"
          ],
          "options": [
            "Persistent background pages for long-running tasks",
            "Exclusive use of synchronous network requests",
            "Event-driven, short-lived service workers for efficiency",
            "Direct DOM manipulation of all external web pages"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In CryptoMetrics, what complex challenge did Prajwal's cron-based syncing and retry logic primarily address for real-time data?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron",
            "retry logic",
            "API rate limits",
            "CoinGecko API"
          ],
          "options": [
            "Ensuring data consistency across multiple databases",
            "Managing high concurrent user requests to the backend",
            "Maintaining data freshness while respecting external API rate limits",
            "Facilitating secure user authentication via the CoinGecko API"
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759358405831": {
      "id": "s_1759358405831",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the 'Payment Gateway Standalone' project, which method was specified for processing payment refunds via the RESTful API?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway Standalone",
            "RESTful APIs",
            "Spring Boot",
            "refunds"
          ],
          "options": [
            "A GET request to /refunds",
            "A POST request to /refunds",
            "A PUT request to /payments/{id}/refund",
            "A DELETE request to /refunds/{id}"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the 'Library Management System', which testing framework was explicitly used to apply TDD principles to the core service logic?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "TDD",
            "JUnit"
          ],
          "options": [
            "Mockito",
            "JUnit",
            "Spring Test",
            "Selenium"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In the 'Event-Driven Order Processing System', alongside at-least-once processing via Kafka consumer groups, what mechanism ensured prevention of duplicate side effects?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "at-least-once",
            "idempotency"
          ],
          "options": [
            "Distributed transactions",
            "Exactly-once delivery guarantees",
            "Idempotency",
            "Two-phase commit"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "The 'Real-Time Messaging Application' used WebSocket with STOMP. What specific technology was configured as a fallback for clients that don't fully support WebSockets?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Real-Time Messaging Application",
            "WebSocket",
            "STOMP",
            "SockJS"
          ],
          "options": [
            "Long polling",
            "Server-Sent Events",
            "SockJS",
            "CometD"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "Regarding the 'Event-Driven Order Processing System', beyond basic communication, what advanced resilience strategies were implemented for handling failed events?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "retry",
            "dead-letter topics"
          ],
          "options": [
            "Circuit breakers and sagas",
            "Retry/backoff strategies and dead-letter topics",
            "Distributed transactions with XA",
            "Idempotent producers and consumers"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "Given your experience with React.js and Three.js, what is a typical use case for integrating Three.js within a React frontend application?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React.js",
            "Three.js"
          ],
          "options": [
            "Managing global application state",
            "Handling routing between different pages",
            "Creating interactive 3D graphics and animations",
            "Processing asynchronous data fetches from APIs"
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759358883969": {
      "id": "s_1759358883969",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Reverie Diary project, which specific library was utilized to visualize mood trends and recurring dream elements?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Chart.js",
            "Reverie Diary",
            "frontend"
          ],
          "options": [
            "Chart.js",
            "P5.js",
            "Three.js",
            "Tailwind CSS"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend system, which database technology was specifically chosen to store real-time crypto assets metrics?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics",
            "backend"
          ],
          "options": [
            "MongoDB",
            "MySQL",
            "PostgreSQL",
            "SQLite"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "DataAlchemist was designed to handle 1,000+ rows efficiently. Which performance optimization technique was applied for its responsive interface?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "frontend"
          ],
          "options": [
            "Server-Side Rendering (SSR)",
            "Client-Side Caching",
            "Virtualized Rendering",
            "Web Workers"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In the CryptoMetrics project, what was the primary purpose of integrating NATS pub-sub messaging?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NATS",
            "CryptoMetrics",
            "pub-sub",
            "backend"
          ],
          "options": [
            "To store historical data securely",
            "To enable real-time data streaming to services",
            "To perform complex data analytics",
            "To authenticate API requests"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "MangaFlow uses Manifest V3 and background service workers. What key architectural benefit does this primarily provide over Manifest V2 for Chrome Extensions?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers",
            "Chrome Extensions API",
            "frontend"
          ],
          "options": [
            "Synchronous API calls for faster processing",
            "Event-driven architecture and improved security",
            "Larger local storage capacity for user data",
            "Native operating system integration capabilities"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "For the CryptoMetrics backend, what specific problem did implementing cron-based syncing and retry logic with the CoinGecko API aim to solve?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron",
            "retry logic",
            "CoinGecko API",
            "API rate limits",
            "backend"
          ],
          "options": [
            "To reduce database storage requirements",
            "To manage concurrent user requests to the API",
            "To maintain data freshness and handle API rate limits",
            "To enable real-time bidirectional communication with users"
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759359413325": {
      "id": "s_1759359413325",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, which technology enabled real-time, persistent client-side data storage without relying on a backend server?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "LocalStorage",
            "client-side data"
          ],
          "options": [
            "SessionStorage",
            "IndexedDB",
            "LocalStorage",
            "Cookies"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For CryptoMetrics, which NoSQL database was chosen to efficiently store real-time metrics like price and market cap for 50+ crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "database"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "SQLite"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "DataAlchemist was designed to efficiently handle displaying 1,000+ CSV rows. Which specific rendering technique achieved this performance?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "CSV"
          ],
          "options": [
            "Server-Side Rendering",
            "Client-Side Pagination",
            "Virtualized Rendering",
            "Progressive Hydration"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In the CryptoMetrics project, which pub-sub messaging system was employed to broadcast real-time crypto data updates to various services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub messaging"
          ],
          "options": [
            "RabbitMQ",
            "Apache Kafka",
            "NATS",
            "Redis Pub/Sub"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "MangaFlow utilized Manifest V3 and background service workers. What key architectural advantage do service workers provide for Chrome extensions?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "service workers",
            "Chrome Extensions API"
          ],
          "options": [
            "Direct synchronous DOM access",
            "Guaranteed persistent background process",
            "Event-driven architecture with efficient resource usage",
            "Enhanced direct file system access"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "To maintain data freshness and gracefully handle CoinGecko API rate limits, CryptoMetrics implemented which combination of backend strategies?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "API rate limits",
            "cron",
            "retry logic"
          ],
          "options": [
            "Real-time WebSockets and manual data refreshing",
            "Client-side polling with extensive local caching",
            "Cron-based syncing with integrated retry logic",
            "Serverless functions and aggressive distributed caching"
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759359564565": {
      "id": "s_1759359564565",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, which technology was primarily used for crafting the polished UI with glassmorphism and metal textures?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "Tailwind CSS",
            "UI",
            "design"
          ],
          "options": [
            "Chart.js",
            "React.js",
            "Tailwind CSS",
            "P5.js"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, which database was utilized to store metrics like price and market cap for over 50 crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "database",
            "Node.js"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "SQLite"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In DataAlchemist, to efficiently manage and display 1,000+ rows from CSVs without performance degradation, what rendering technique was implemented in the Next.js interface?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "Next.js",
            "virtualized rendering",
            "CSV",
            "performance"
          ],
          "options": [
            "Server-side rendering",
            "Static site generation",
            "Virtualized rendering",
            "Client-side hydration"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "For CryptoMetrics, how did you ensure near real-time broadcasting of crypto data updates to various downstream services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "real-time data",
            "messaging"
          ],
          "options": [
            "Polling an API gateway",
            "Using NATS pub-sub messaging",
            "Direct database reads for each service",
            "WebSocket connections for every service"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In MangaFlow, by adopting Manifest V3 and background service workers, what key architectural pattern was leveraged for efficient and extensible event handling across multiple sites?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "service workers",
            "Chrome Extensions API",
            "event-driven architecture"
          ],
          "options": [
            "Model-View-Controller",
            "Event-driven architecture",
            "Client-server model",
            "Unidirectional data flow"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "To maintain data freshness and handle potential CoinGecko API rate limits in the CryptoMetrics backend, what two primary strategies were employed?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "cron",
            "retry logic",
            "API rate limits",
            "data freshness"
          ],
          "options": [
            "Aggressive caching and database sharding",
            "Load balancing and message queueing",
            "Cron-based syncing and retry logic",
            "Manual data entry and rate limit bypass"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 9
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 4
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 1
        }
      ]
    },
    "s_1759359711348": {
      "id": "s_1759359711348",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway project, which HTTP method is typically used to create new payments via a REST endpoint?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "RESTful APIs",
            "Spring Boot",
            "Payment Gateway",
            "HTTP"
          ],
          "options": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the Library Management System, which framework was used for implementing TDD and testing core service logic?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "TDD",
            "JUnit",
            "Library Management System",
            "Testing"
          ],
          "options": [
            "Mockito",
            "Maven",
            "Spring Boot",
            "JUnit"
          ],
          "correctIndex": 3
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System using Kafka, what mechanism helps ensure 'at-least-once' processing reliability?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Systems",
            "Apache Kafka",
            "Microservices",
            "at-least-once",
            "consumer groups"
          ],
          "options": [
            "Kafka partitions",
            "Consumer groups",
            "Idempotent producers",
            "Retrying failed messages"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "For the Real-Time Messaging Application, what is the primary role of SockJS when configuring STOMP WebSocket endpoints?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "WebSocket",
            "STOMP",
            "SockJS",
            "Real-Time Messaging",
            "Spring Boot"
          ],
          "options": [
            "Message serialization",
            "Protocol negotiation",
            "Fallback for browsers without native WebSockets",
            "User authentication"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "In the Event-Driven Order Processing System, what is the main purpose of a Dead-Letter Topic (DLT) in combination with retry strategies?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Systems",
            "Microservices",
            "Apache Kafka",
            "Dead-Letter Topic",
            "retry/backoff"
          ],
          "options": [
            "Increase message throughput",
            "Store successfully processed events",
            "Isolate and handle persistently failing messages",
            "Optimize consumer group rebalancing"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "When implementing paginated search APIs with filters in the Library Management System, how do 'appropriate DB indexes' primarily optimize queries?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Library Management System",
            "Hibernate",
            "MySQL",
            "DB indexes",
            "Query Optimization",
            "Paging"
          ],
          "options": [
            "Reduce network latency",
            "Minimize application memory usage",
            "Speed up data retrieval for filtered and sorted results",
            "Ensure data consistency across replicas"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 11
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 5
        }
      ]
    },
    "s_1759359841285": {
      "id": "s_1759359841285",
      "candidate": {
        "name": "John Doe",
        "email": "youremail@yourdomain.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For automating data extraction from legacy systems using SQL and Perl scripts, what was SQL's primary purpose?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "SQL",
            "legacy systems",
            "data extraction"
          ],
          "options": [
            "Defining UI layouts for data display.",
            "Querying and manipulating structured data.",
            "Writing operating system level scripts.",
            "Designing graphical user interfaces."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Given the 'Multi-User Drawing Tool' used C++ and MFC, what is MFC primarily used for in that context?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MFC",
            "UI",
            "C++",
            "Multi-User Drawing Tool"
          ],
          "options": [
            "Building server-side API endpoints.",
            "Managing database transactions.",
            "Developing Windows desktop user interfaces.",
            "Optimizing backend algorithm performance."
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "When optimizing the gradient service via caching, what was the likely main benefit gained from this approach?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Caching",
            "performance optimization",
            "service"
          ],
          "options": [
            "Ensuring data persistence across reboots.",
            "Reducing redundant computations or data fetches.",
            "Facilitating asynchronous message queues.",
            "Improving database schema design."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "For the VS open file switcher UI, extending it to tool windows required understanding what aspect of the VS environment?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "UI",
            "VS",
            "extensibility",
            "tool windows"
          ],
          "options": [
            "The underlying database schema for file storage.",
            "VS's UI framework and extensibility model.",
            "Network protocols for file transfer.",
            "The compiler optimization techniques."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "To integrate iChat with Spotlight Search, what technical challenge did extracting metadata from chat transcripts primarily address?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "iChat",
            "Spotlight Search",
            "metadata extraction",
            "search database"
          ],
          "options": [
            "Optimizing the chat application's UI performance.",
            "Enabling the search indexer to understand and categorize chat content.",
            "Securing the network communication for chat.",
            "Reducing the storage footprint of chat logs."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "In the Multi-User Drawing Tool, synchronizing real-time edits from multiple users on a C++/MFC UI presented what core challenge?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Multi-User Drawing Tool",
            "synchronization",
            "real-time",
            "MFC",
            "C++"
          ],
          "options": [
            "Managing database indexing for rapid search.",
            "Handling concurrent UI updates and preventing drawing conflicts on the client.",
            "Optimizing server-side data compression algorithms.",
            "Implementing secure authentication for user logins."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 6
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 5
        }
      ]
    },
    "s_1759360173220": {
      "id": "s_1759360173220",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, how did Prajwal efficiently display over 1,000 rows while using Tailwind CSS for the responsive interface?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "Tailwind CSS",
            "virtualized rendering"
          ],
          "options": [
            "By implementing server-side rendering for all data.",
            "By using client-side pagination to limit visible rows.",
            "By employing virtualized rendering techniques.",
            "By optimizing CSS selectors and reducing DOM complexity."
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics project, which database technology was utilized to store real-time metrics for 50+ crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "Firebase Realtime Database"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "MangaFlow uses Manifest V3. Which component was critical for enabling its efficient, event-driven architecture?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers",
            "Chrome Extensions API"
          ],
          "options": [
            "Content Scripts",
            "The Browser Action Popup",
            "Background Service Workers",
            "The Options Page UI"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, which pub-sub messaging system was employed to broadcast real-time crypto data updates to services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub"
          ],
          "options": [
            "Apache Kafka",
            "RabbitMQ",
            "NATS",
            "AWS SQS"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "In DataAlchemist, after parsing CSVs with Papa Parse, how was the Google Gemini API specifically utilized to streamline rule-based workflows?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "Google Gemini API",
            "Papa Parse",
            "natural language rules",
            "executable logic"
          ],
          "options": [
            "To generate automated data visualizations from the CSV content.",
            "To convert natural language rules into executable logic for task allocation.",
            "To provide sentiment analysis on the uploaded CSV data entries.",
            "To suggest optimal parsing configurations for Papa Parse."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "For CryptoMetrics, what specific backend strategies were implemented to maintain data freshness and handle CoinGecko API rate limits?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "cron-based syncing",
            "retry logic",
            "API rate limits"
          ],
          "options": [
            "Implementing serverless functions with event-driven retries.",
            "Utilizing WebSockets for push updates and aggressive caching.",
            "Employing cron-based syncing with built-in retry logic.",
            "Using manual API key rotation and request throttling middleware."
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 9
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 2
        }
      ]
    },
    "s_1759360434860": {
      "id": "s_1759360434860",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Payment Gateway, how did Spring Boot simplify implementing REST endpoints for payment processing?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "Payment Gateway"
          ],
          "options": [
            "By auto-configuring the DispatcherServlet",
            "By providing `@RestController` and `@GetMapping` annotations",
            "By automatically generating database schemas",
            "By managing client-side routing and UI components"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Considering your React.js skill, what's its primary benefit for building user interfaces, as opposed to plain HTML/CSS/JS?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React.js",
            "JavaScript"
          ],
          "options": [
            "Handling server-side business logic",
            "Facilitating declarative UI components and state management",
            "Optimizing database query performance",
            "Providing real-time WebSocket communication"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "For your Event-Driven Order Processing System, what was Apache Kafka's crucial role in achieving asynchronous communication between microservices?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Systems",
            "Apache Kafka",
            "Microservices"
          ],
          "options": [
            "As a high-performance relational database",
            "As a synchronous HTTP API gateway",
            "As a distributed, fault-tolerant message broker",
            "As an authentication and authorization server"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In the Library Management System, how did Hibernate assist in optimizing database interactions for paginated search APIs with filters?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Hibernate",
            "MySQL",
            "paginated search APIs",
            "DB indexes"
          ],
          "options": [
            "By generating raw SQL queries manually",
            "By providing Object-Relational Mapping (ORM) and HQL/Criteria API",
            "By handling frontend JavaScript validation",
            "By caching entire database tables in memory"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "To ensure 'at-least-once processing with consumer groups and idempotency' in your Event-Driven Order Processing, what specific technique did you use?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Systems",
            "Apache Kafka",
            "idempotency",
            "microservices"
          ],
          "options": [
            "Only enabling auto-commit for Kafka consumers",
            "Implementing unique transaction IDs and checking processing state",
            "Relying solely on Kafka's exactly-once semantics for all cases",
            "Sending messages directly via RabbitMQ for critical events"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "Given your Three.js experience, how would you approach creating a complex interactive 3D scene that dynamically updates based on user input?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Three.js",
            "interactive 3D graphics"
          ],
          "options": [
            "Using WebGL directly for scene management and rendering loop",
            "Leveraging Three.js's scene graph, geometry, and material APIs within a render loop",
            "Only using P5.js for 3D visualizations",
            "Implementing all logic on the Node.js backend server"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 5
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 0
        }
      ]
    },
    "s_1759360595110": {
      "id": "s_1759360595110",
      "candidate": {
        "name": "John Doe",
        "email": "youremail@yourdomain.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "To automate large dataset extraction from legacy systems using SQL, which primary database operation is crucial for retrieving the data?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "SQL",
            "data extraction",
            "legacy systems",
            "Microsoft SQL Server"
          ],
          "options": [
            "INSERT INTO",
            "UPDATE SET",
            "DELETE FROM",
            "SELECT FROM"
          ],
          "correctIndex": 3
        },
        {
          "id": "2",
          "text": "When developing the MFC-based Multi-User Drawing Tool, which core object type is primarily responsible for rendering custom graphics on the screen?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MFC",
            "C++",
            "Multi-User Drawing Tool",
            "UI"
          ],
          "options": [
            "CWinApp",
            "CDocument",
            "CView",
            "CFrameWnd"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "For integrating iChat with Spotlight Search, how would you typically provide chat metadata from saved transcripts to the system-wide search database?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "iChat",
            "Spotlight Search",
            "metadata",
            "system-wide search database"
          ],
          "options": [
            "Direct file system indexing",
            "Custom Spotlight importer plugin",
            "Frequent database dumps",
            "RPC calls to Spotlight API"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "Optimizing the method similarity computation from O(n²) to O(n log n) implies leveraging which algorithmic paradigm?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Algorithms",
            "O(n log n)",
            "performance optimization",
            "C#"
          ],
          "options": [
            "Brute-force iteration",
            "Dynamic programming",
            "Divide and conquer",
            "Greedy approach"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "Redesigning a chat file format while maintaining backward compatibility for search often requires implementing what key architectural strategy?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "chat file format",
            "backward compatibility",
            "search",
            "data formats"
          ],
          "options": [
            "Schema evolution with data migration",
            "Separate legacy & new systems",
            "Format versioning with adaptable parsers",
            "Using a schema-less document store"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In the MFC-based Multi-User Drawing Tool, what would be a robust strategy for synchronizing drawing edits across multiple users reliably?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Multi-User Drawing Tool",
            "MFC",
            "C++",
            "synchronization"
          ],
          "options": [
            "Polling server for full canvas updates",
            "Broadcasting P2P UDP packets",
            "Event-driven architecture with command queuing",
            "Server-side image stream distribution"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 6
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 0
        }
      ]
    },
    "s_1759360868995": {
      "id": "s_1759360868995",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway Standalone project, which database was used to support its standalone execution?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway",
            "MySQL"
          ],
          "options": [
            "MySQL",
            "MongoDB",
            "Redis",
            "Apache Kafka"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "Which framework was primarily utilized in the Library Management System project to manage persistence and optimize database queries?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "Hibernate"
          ],
          "options": [
            "Spring MVC",
            "Hibernate",
            "JUnit",
            "RabbitMQ"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System, which strategy helps ensure idempotency when consumer services process Kafka messages?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "idempotency"
          ],
          "options": [
            "Using unique message IDs and checking against a processed log",
            "Increasing consumer group size",
            "Disabling auto-commit for offsets",
            "Implementing a simple retry mechanism"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "For the Real-Time Messaging Application, what was the primary role of SockJS in the WebSocket configuration?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Real-Time Messaging Application",
            "WebSocket",
            "SockJS"
          ],
          "options": [
            "Handling secure WebSocket connections (WSS)",
            "Providing fallback options for browsers without native WebSocket",
            "Managing message serialization/deserialization",
            "Implementing advanced routing logic for messages"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In the Library Management System, how would Mockito typically complement JUnit for TDD when testing complex service logic?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Library Management System",
            "TDD",
            "JUnit",
            "Mockito"
          ],
          "options": [
            "By generating database schemas automatically for testing",
            "By creating mock objects for external dependencies like repositories",
            "By deploying the application to a dedicated test server",
            "By measuring code coverage metrics of test suites"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "For the Event-Driven Order Processing System, what is the purpose of a dead-letter topic in conjunction with retry/backoff strategies?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "dead-letter topics"
          ],
          "options": [
            "To store successfully processed messages for auditing",
            "To temporarily hold messages during network latency issues",
            "To isolate messages that repeatedly fail processing after retries for manual inspection",
            "To serve as a high-priority queue for urgent orders"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 2
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 1
        }
      ]
    },
    "s_1759361040807": {
      "id": "s_1759361040807",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For the Library Management System's paginated search, how were optimized queries achieved, as stated in the resume?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "MySQL",
            "paginated search",
            "DB indexes"
          ],
          "options": [
            "Caching all search results in Redis",
            "Implementing appropriate DB indexes",
            "Using NoSQL instead of MySQL",
            "Performing extensive joins across tables"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Which JavaScript library from Prajwal's skills list is specifically designed for creating and displaying 3D graphics in a web browser?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "JavaScript",
            "Three.js",
            "3D graphics",
            "frontend"
          ],
          "options": [
            "React.js",
            "Node.js",
            "P5.js",
            "Three.js"
          ],
          "correctIndex": 3
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System, what mechanism ensured \"at-least-once processing\" of events with Apache Kafka?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven",
            "Apache Kafka",
            "at-least-once processing",
            "consumer groups",
            "microservices"
          ],
          "options": [
            "Implementing idempotent producers",
            "Utilizing Kafka consumer groups",
            "Ensuring synchronous message delivery",
            "Employing WebSocket for event transport"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "In the Real-Time Messaging Application, what was the primary role of STOMP when configuring WebSocket endpoints?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Real-Time Messaging",
            "WebSocket",
            "STOMP",
            "SockJS",
            "RabbitMQ"
          ],
          "options": [
            "Providing a fallback for non-WebSocket clients",
            "Defining a structured messaging protocol over WebSocket",
            "Handling database persistence for messages",
            "Managing user authentication and authorization"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "The Event-Driven Order Processing System used Kafka with consumer groups and idempotency. Why is idempotency crucial for consumers in such a setup?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven",
            "Microservices",
            "Kafka",
            "idempotency",
            "at-least-once processing",
            "retry/backoff"
          ],
          "options": [
            "To ensure messages are always processed in strict order",
            "To prevent duplicate processing when messages are delivered more than once",
            "To guarantee immediate message delivery to all consumers",
            "To encrypt sensitive event data before processing"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "Considering the Real-Time Messaging application's use of MongoDB and Redis, what is a highly probable application for Redis in this context?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Real-Time Messaging",
            "MongoDB",
            "Redis",
            "WebSocket",
            "session management",
            "caching"
          ],
          "options": [
            "Primary storage for all chat message history",
            "As a message broker for pub/sub messaging",
            "Caching frequently accessed user presence or session data",
            "Long-term archival of user activity logs"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 9
        }
      ]
    },
    "s_1759361176578": {
      "id": "s_1759361176578",
      "candidate": {
        "name": "John Doe",
        "email": "youremail@yourdomain.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "John's iChat integration involved extracting metadata for a system-wide search. Which technology was likely crucial for storing this metadata?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "iChat",
            "Spotlight Search",
            "metadata",
            "search database",
            "SQL"
          ],
          "options": [
            "A SQL database",
            "Perl scripts",
            "MFC",
            "C++ classes"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the VS open file switcher UI, which of John's listed skills is most relevant for designing desktop application user interfaces?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "VS open file switcher",
            "UI",
            "C#",
            "desktop application"
          ],
          "options": [
            "C# for Windows application development",
            "Microsoft SQL Server for data storage",
            "Perl for scripting automation",
            "Objective-C for mobile apps"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "Redesigning iChat's chat file format with backward compatibility typically involves strategies for handling older data. What is a common approach?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "chat file format",
            "backward compatibility",
            "iChat",
            "data structure"
          ],
          "options": [
            "Versioning the file format and providing parsers for old versions.",
            "Converting all old files to the new format upfront.",
            "Using only the new format and dropping support for old data.",
            "Storing all data as plain text for simplicity."
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "The Multi-User Drawing Tool used MFC for its UI. What is a primary challenge when synchronizing UI elements across multiple users in an MFC application?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Multi-User Drawing Tool",
            "MFC",
            "synchronized",
            "UI elements",
            "C++"
          ],
          "options": [
            "Managing message queues for real-time updates.",
            "Optimizing SQL queries for drawing data.",
            "Designing complex XML schemas for drawings.",
            "Ensuring proper garbage collection of C++ objects."
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "For the VS gradient service, optimized via caching, which caching strategy would be most suitable for frequently accessed but relatively static gradient data?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "gradient service",
            "caching",
            "performance",
            "VS add-ins"
          ],
          "options": [
            "In-memory cache with a Time-To-Live (TTL) expiration.",
            "Write-through cache for immediate persistence.",
            "Cache-aside strategy with manual invalidation.",
            "Database query optimization instead of caching."
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "In John's UNIX-style OS, implementing the scheduler requires careful management of processes. Which common algorithm minimizes average waiting time?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "UNIX-style OS",
            "scheduler",
            "processes",
            "C"
          ],
          "options": [
            "Shortest Job First (SJF)",
            "First-Come, First-Served (FCFS)",
            "Round Robin (RR)",
            "Priority Scheduling"
          ],
          "correctIndex": 0
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 0
        }
      ]
    },
    "s_1759361861889": {
      "id": "s_1759361861889",
      "candidate": {
        "name": "John Doe",
        "email": "youremail@yourdomain.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For the Visual Studio open file switcher UI, which technology on your resume was most relevant for its design and extension?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "UI for the VS open file switcher",
            "C#",
            ".NET"
          ],
          "options": [
            "C#/.NET",
            "MFC",
            "XCode/Interface Builder",
            "C++"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "Regarding automated extraction of large datasets from legacy systems, what technology was key for processing data?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "large datasets",
            "legacy systems",
            "SQL",
            "Perl scripts"
          ],
          "options": [
            "Java",
            "Perl scripts",
            "Objective-C",
            "C++"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In the Multi-User Drawing Tool project, how did MFC primarily contribute to the application's functionality?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Multi-User Drawing Tool",
            "MFC",
            "C++"
          ],
          "options": [
            "Managing backend synchronization logic",
            "Providing database connectivity",
            "Developing the graphical user interface",
            "Handling network communication protocols"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "For the iChat and Spotlight Search integration, what did you specifically create to extract metadata from chat transcripts?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "iChat",
            "Spotlight Search",
            "metadata",
            "chat transcripts"
          ],
          "options": [
            "A prediction algorithm",
            "A custom metadata extraction tool",
            "A system-wide search database",
            "A Perl script for parsing"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "When creating the gradient service across Visual Studio and its add-ins, what specific technique optimized its performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "gradient across VS",
            "optimizing its performance",
            "caching"
          ],
          "options": [
            "Implementing a prediction algorithm",
            "Redesigning the chat file format",
            "Optimizing performance via caching",
            "Reducing algorithmic complexity to O(n log n)"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "The optimization of method similarity computation from O(n^2) to O(n log n) primarily addresses which aspect of software engineering?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "similarity of all methods",
            "O(n^2) to O(n log n)",
            "optimizing performance"
          ],
          "options": [
            "User interface responsiveness",
            "Network latency reduction",
            "Algorithmic complexity and efficiency",
            "Database query optimization"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 0
        }
      ]
    },
    "s_1759362139117": {
      "id": "s_1759362139117",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For the custom PCB design of the ZVT Bi-Directional DC-DC converter, which tool was primarily used based on your skills?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Altium Designer",
            "Eagle",
            "PCB Design",
            "Schematic Capture",
            "Layout"
          ],
          "options": [
            "Autodesk Fusion 360",
            "Altium Designer",
            "MATLAB",
            "Simulink"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Which specific microcontroller board did you use to develop low-level firmware for the ZVT Bi-Directional DC-DC converter?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Arduino Mega",
            "Firmware",
            "ZVT Bi-Directional DC-DC converter",
            "Microcontroller Boards"
          ],
          "options": [
            "STM32 (ARM Cortex-M)",
            "Arduino Mega",
            "ESP32",
            "Raspberry Pi"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In the Motor Speed Synchronisation project, what was the primary role of the PID control algorithm tuned in Arduino firmware?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "PID Control",
            "Arduino",
            "Rotary Encoders",
            "Motor Speed Synchronisation",
            "Firmware"
          ],
          "options": [
            "To monitor motor temperature",
            "To minimize speed error between motors",
            "To convert analog RPM signals to digital",
            "To regulate supply voltage"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "What specific output did your low-level firmware generate for the ZVT Bi-Directional DC-DC converter using hardware timers?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Firmware",
            "ZVT Bi-Directional DC-DC converter",
            "Hardware Timers",
            "Control Signals",
            "Arduino Mega"
          ],
          "options": [
            "Analog current measurements",
            "Four synchronized, high-precision control signals",
            "Temperature sensor readings",
            "Serial communication data packets"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "When prototyping and testing the DC battery charger, what type of magnetics-related failure mode might \"burn-in tests\" help isolate?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DC Battery Charger",
            "Burn-in Tests",
            "Magnetics",
            "Failure Modes",
            "Component Stress"
          ],
          "options": [
            "Open-circuit faults in the battery itself",
            "Core saturation or excessive heating in inductors/transformers",
            "Software bugs in the charging algorithm",
            "Mechanical stress from mounting components"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "How do \"manipulating hardware timers and counters\" contribute to the ZVT (Zero Voltage Transition) operation of the DC-DC converter?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Hardware Timers",
            "ZVT",
            "DC-DC converter",
            "Firmware",
            "High-precision control signals"
          ],
          "options": [
            "By calculating real-time power consumption",
            "By ensuring precise dead-time control and switching synchronization",
            "By modulating the input AC voltage",
            "By logging ambient temperature data"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 14
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 6
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 18
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 14
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 21
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 18
        }
      ]
    },
    "s_1759362422534": {
      "id": "s_1759362422534",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "When developing low-level firmware for the ZVT Bi-Directional DC-DC converter on Arduino Mega, what was the primary use of hardware timers?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "firmware",
            "Arduino Mega",
            "hardware timers",
            "DC-DC converter"
          ],
          "options": [
            "Managing user interface elements",
            "Generating precise PWM control signals",
            "Storing sensor data for logging",
            "Optimizing database queries"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Which software tool from your experience with custom PCB design (e.g., for the ZVT converter or Pure Sine Wave Inverter) is primarily for schematic capture and layout?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PCB design",
            "schematic capture",
            "layout",
            "Altium Designer",
            "Eagle"
          ],
          "options": [
            "MATLAB",
            "Altium Designer",
            "Git",
            "Simulink"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "For your low-cost single-phase inverter, what is a key challenge when implementing multiple SPWM approaches on a microcontroller (e.g., STM32, ESP32)?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "inverter",
            "SPWM",
            "microcontroller",
            "STM32",
            "ESP32",
            "firmware"
          ],
          "options": [
            "Ensuring stable internet connectivity",
            "Balancing computational load with real-time signal generation",
            "Integrating complex frontend frameworks",
            "Managing large relational databases"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "In the Motor Speed Synchronisation project, using Arduino firmware, what immediate issue would indicate an improperly tuned PID control algorithm?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Motor Speed Synchronisation",
            "PID control",
            "Arduino firmware",
            "DC motors"
          ],
          "options": [
            "Excessive memory usage in the data logger",
            "Persistent oscillations or slow response in motor RPM",
            "Failure to connect to cloud services",
            "Incorrect data formatting for GUI display"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "When prototyping the DC battery charger, what systematic approach is critical for isolating failure modes related to magnetics and component stress during burn-in tests?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DC battery charger",
            "burn-in tests",
            "failure modes",
            "magnetics",
            "component stress"
          ],
          "options": [
            "Implementing a serverless architecture",
            "Varying load conditions and environmental factors",
            "Optimizing JavaScript bundle size",
            "Deploying containerized microservices"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "For the EV low-voltage electrical system, how does firmware typically ensure competition-rule-compliant TSAL/RTDS systems operate safely and reliably?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "EV systems",
            "TSAL/RTDS",
            "firmware",
            "safety interlocks",
            "automotive electronics"
          ],
          "options": [
            "By rendering responsive user interfaces",
            "Through redundant sensor monitoring and fault detection logic",
            "Via server-side rendering for faster page loads",
            "By managing distributed ledger technologies"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 3
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 0
        }
      ]
    },
    "s_1759362520181": {
      "id": "s_1759362520181",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "From the SMP 24 EEESsoc internship, you developed low-level firmware for an Arduino Mega, manipulating hardware timers and counters. What is a primary benefit of using hardware timers for precise control signals over software delays?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "low-level firmware",
            "Arduino Mega",
            "hardware timers",
            "control signals"
          ],
          "options": [
            "They consume less RAM.",
            "They are unaffected by CPU load or interrupts.",
            "They simplify debugging with an oscilloscope.",
            "They automatically generate sine waves."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Your internships involved designing and fabricating custom PCBs using tools like Altium Designer and Eagle. Which of these is typically the *first* step in a PCB design workflow after initial concept?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PCB design",
            "Altium Designer",
            "Eagle",
            "schematic capture",
            "layout"
          ],
          "options": [
            "Board assembly and soldering.",
            "Component sourcing and procurement.",
            "Schematic capture.",
            "Generating Gerber files."
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "At Suavy Technologies, you explored multiple SPWM implementation approaches for an inverter. What is the main purpose of SPWM (Sine-Pulse Width Modulation) in inverter design?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Inverter design",
            "SPWM",
            "Power Electronics"
          ],
          "options": [
            "To reduce the inverter's physical size.",
            "To generate a high-frequency square wave output.",
            "To approximate a pure sine wave output from a DC source.",
            "To boost the input DC voltage to a higher level."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In your 'Motor Speed Synchronisation' project, you fine-tuned a PID control algorithm. What primary role does the 'Integral' term play in a PID controller for motor speed synchronization?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "PID control",
            "Arduino firmware",
            "Motor Speed Synchronisation",
            "C++"
          ],
          "options": [
            "Reacts to the current error proportional to its magnitude.",
            "Predicts future errors based on the rate of change.",
            "Eliminates steady-state error by accumulating past errors.",
            "Dampens oscillations to prevent overshooting."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "Regarding your work with ZVT Bi-Directional DC-DC converters, what is the primary advantage of Zero Voltage Transition (ZVT) technology in power converters?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "ZVT Bi-Directional DC-DC converter",
            "Power Electronics",
            "Firmware"
          ],
          "options": [
            "It eliminates the need for any switching components.",
            "It significantly reduces switching losses and EMI.",
            "It allows for infinitely high voltage conversion ratios.",
            "It ensures constant output voltage regardless of load variations."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "For Team Srijan, you designed EV low-voltage systems and authored FMEA reports. How does FMEA primarily contribute to the design of critical safety interlocks in an EV system?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "EV Systems",
            "FMEA",
            "safety interlocks",
            "Automotive Electronics"
          ],
          "options": [
            "It provides a standardized component list for procurement.",
            "It identifies potential failure modes and their impact on safety.",
            "It automates the schematic capture process.",
            "It calculates the optimal battery charging voltage."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 3
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 0
        }
      ]
    },
    "s_1759362567780": {
      "id": "s_1759362567780",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "When manipulating hardware timers on an Arduino Mega for control signals for the ZVT converter, what is the primary role of a timer's prescaler?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Arduino Mega",
            "hardware timers",
            "ZVT Bi-Directional DC-DC converter"
          ],
          "options": [
            "It sets the timer's operating voltage.",
            "It divides the system clock frequency.",
            "It defines the number of timer interrupts.",
            "It stores the output compare value."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "In Altium Designer, when designing a custom PCB for a ZVT converter, what is the main purpose of the schematic capture phase?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Altium Designer",
            "custom PCB",
            "schematic capture",
            "ZVT Bi-Directional DC-DC converter"
          ],
          "options": [
            "Generating the Gerber files for manufacturing.",
            "Placing physical components on the board.",
            "Defining component connectivity and logic.",
            "Performing signal integrity analysis."
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "For the low-cost single-phase inverter and Pure Sine Wave Inverter using EG8010, what is the primary benefit of using SPWM techniques?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "single-phase inverter",
            "SPWM",
            "EG8010 IC",
            "Pure Sine Wave"
          ],
          "options": [
            "Maximizing heat dissipation in MOSFETs.",
            "Increasing the inverter's DC input voltage.",
            "Reducing harmonic distortion in the output AC.",
            "Simplifying the feedback control loop design."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "When fine-tuning the PID control algorithm in Arduino firmware for motor synchronization, which term primarily addresses accumulated error over time?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "PID control algorithm",
            "Arduino firmware",
            "Motor Speed Synchronisation",
            "rotary encoders"
          ],
          "options": [
            "Proportional (P) term.",
            "Integral (I) term.",
            "Derivative (D) term.",
            "Feedback (F) term."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In testing the DC battery charger, why were multi-hour burn-in tests crucial for isolating failure modes related to magnetics and component stress?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DC battery charger",
            "burn-in tests",
            "failure modes",
            "magnetics",
            "component stress",
            "oscilloscope/logic-analyzer"
          ],
          "options": [
            "To calibrate the oscilloscope for transient analysis.",
            "To accelerate latent defects caused by environmental stress.",
            "To determine the maximum voltage rating of components.",
            "To measure the insulation resistance of the PCB traces."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "For the EV low-voltage system with TSAL/RTDS, how would FMEA be specifically applied to enhance the critical safety interlocks?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "EV low-voltage electrical system",
            "safety interlocks",
            "TSAL/RTDS",
            "FMEA"
          ],
          "options": [
            "By optimizing the PCB layout for thermal management.",
            "By systematically identifying potential failure points and their effects.",
            "By reducing the number of passive components in the circuit.",
            "By automating the process of competition rule checks."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 6
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 0
        }
      ]
    },
    "s_1759362699929": {
      "id": "s_1759362699929",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For the ZVT Bi-Directional DC-DC converter, what Arduino Mega feature was crucial for generating synchronized, high-precision control signals?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Arduino Mega",
            "ZVT Bi-Directional DC-DC converter",
            "hardware timers",
            "firmware"
          ],
          "options": [
            "The delayMicroseconds() function for precise delays",
            "Direct register manipulation of hardware timers",
            "SoftwareSerial library for timed commands",
            "The millis() function with polling loops"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "In your inverter projects (e.g., Suavy Technologies intern), what microcontroller component generates the SPWM signals needed for power output control?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "SPWM",
            "inverter design",
            "microcontroller",
            "Suavy Technologies"
          ],
          "options": [
            "Analog-to-Digital Converter (ADC)",
            "General Purpose Input/Output (GPIO) pins directly",
            "Timer/PWM peripherals",
            "Universal Asynchronous Receiver-Transmitter (UART)"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "For motor synchronization using PID control (Motor Speed Synchronisation project), which gain primarily influences steady-state error reduction without excessive overshoot?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "PID Control",
            "Motor Speed Synchronisation",
            "C++",
            "Arduino firmware"
          ],
          "options": [
            "Proportional (P) gain",
            "Integral (I) gain",
            "Derivative (D) gain",
            "Feedforward gain"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "Debugging the DC battery charger, which magnetic-related failure mode is harder to diagnose effectively with a logic analyzer than an oscilloscope?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DC battery charger",
            "magnetics",
            "oscilloscope",
            "logic-analyzer",
            "failure modes"
          ],
          "options": [
            "Incorrect PWM switching sequence",
            "Core saturation causing waveform distortion",
            "Digital communication protocol errors",
            "Timing drift of digital gate signals"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "For the EV low-voltage system's TSAL/RTDS safety interlocks (Team Srijan), how would you ensure fault tolerance in the embedded C feedback path?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "EV low-voltage electrical system",
            "safety interlocks",
            "TSAL/RTDS",
            "Embedded C",
            "FMEA"
          ],
          "options": [
            "Implement redundant sensor readings and cross-validation routines",
            "Increase the main control loop's execution frequency significantly",
            "Utilize a complex real-time operating system (RTOS) scheduler",
            "Minimize the number of conditional statements in the code"
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "To achieve superior, high-precision control signal synchronization for the ZVT converter, what STM32/TI C2000 feature (mentioned in skills) outperforms basic Arduino timers?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "ZVT Bi-Directional DC-DC converter",
            "STM32",
            "TI C2000 series",
            "control signals",
            "firmware"
          ],
          "options": [
            "Built-in Ethernet MAC for network synchronization",
            "Dedicated, advanced PWM modules (e.g., ePWM, HRTIM)",
            "High-speed Analog-to-Digital Converters (ADCs) with DMA",
            "Hardware-accelerated floating-point unit (FPU)"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Direct register manipulation of hardware timers",
          "timeUsed": 4
        },
        {
          "questionId": "2",
          "answer": "Timer/PWM peripherals",
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Integral (I) gain",
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "Core saturation causing waveform distortion",
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Utilize a complex real-time operating system (RTOS) scheduler",
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Hardware-accelerated floating-point unit (FPU)",
          "timeUsed": 0
        }
      ]
    },
    "s_1759363020603": {
      "id": "s_1759363020603",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For precise control signals in a ZVT DC-DC converter using Arduino Mega, what is a key advantage of hardware timers over `delayMicroseconds()`?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Arduino Mega",
            "hardware timers",
            "ZVT Bi-Directional DC-DC converter",
            "firmware"
          ],
          "options": [
            "Reduces firmware complexity.",
            "Provides more accurate and stable timing independent of CPU load.",
            "Consumes less power.",
            "Allows for easier debugging."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "In the PCB design workflow using Altium Designer, what is the primary purpose of schematic capture?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PCB Design",
            "schematic capture",
            "Altium Designer",
            "hardware"
          ],
          "options": [
            "To visualize the physical board dimensions.",
            "To define the electrical connections and components.",
            "To simulate thermal performance.",
            "To generate the bill of materials automatically."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "When developing SPWM implementation approaches for a low-cost single-phase inverter, what is a common trade-off considered?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "SPWM",
            "single-phase inverter",
            "firmware",
            "power electronics"
          ],
          "options": [
            "Cost vs. input voltage range.",
            "Switching frequency vs. output waveform quality.",
            "Microcontroller size vs. power efficiency.",
            "Cooling requirements vs. magnetics size."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "During burn-in tests for a DC battery charger, isolating failure modes related to 'magnetics' often points to issues with which component?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DC battery charger",
            "burn-in tests",
            "magnetics",
            "power electronics"
          ],
          "options": [
            "Microcontroller.",
            "Input/output capacitors.",
            "Inductors or transformers.",
            "Voltage regulators."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "For master-slave DC motor synchronization with PID control in Arduino firmware, which technique best improves responsiveness and disturbance rejection?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "PID control",
            "DC motors",
            "Arduino firmware",
            "control systems"
          ],
          "options": [
            "Implementing feedforward control from the master's speed command.",
            "Reducing the motor's operating voltage.",
            "Increasing the 'P' term significantly.",
            "Simplifying the feedback loop by removing the 'D' term."
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "In EV low-voltage system design, how is FMEA best applied to assess risks related to TSAL/RTDS systems or safety interlocks?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "EV low-voltage electrical system",
            "FMEA",
            "safety interlocks",
            "TSAL/RTDS"
          ],
          "options": [
            "To analyze potential failure modes and their impact on safety functions.",
            "To evaluate manufacturing costs of safety components.",
            "To determine the optimal placement of warning lights.",
            "To certify compliance with environmental regulations."
          ],
          "correctIndex": 0
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Provides more accurate and stable timing independent of CPU load.",
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "To define the electrical connections and components.",
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Switching frequency vs. output waveform quality.",
          "timeUsed": 2
        },
        {
          "questionId": "4",
          "answer": "Input/output capacitors.",
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "Reducing the motor's operating voltage.",
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "To evaluate manufacturing costs of safety components.",
          "timeUsed": 1
        }
      ]
    },
    "s_1759363204798": {
      "id": "s_1759363204798",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For the ZVT Bi-Directional DC-DC converter PCB, which software tool did you use for schematic capture and layout, as per your skills?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PCB Design",
            "ZVT Bi-Directional DC-DC converter",
            "schematic capture",
            "layout",
            "Altium Designer"
          ],
          "options": [
            "Altium Designer",
            "Eagle",
            "Autodesk Fusion 360",
            "MATLAB"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "In the ZVT Bi-Directional DC-DC converter project, what specific hardware features of the Arduino Mega did you manipulate for control signals?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Arduino Mega",
            "ZVT Bi-Directional DC-DC converter",
            "firmware",
            "hardware timers",
            "counters"
          ],
          "options": [
            "Hardware timers and counters",
            "Analog-to-digital converters",
            "SPI communication peripherals",
            "External interrupts only"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "When designing the low-cost single-phase inverter, what was a primary advantage of using SPWM implementation approaches for output waveform?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "low-cost single-phase inverter",
            "SPWM",
            "inverter design",
            "Power Electronics"
          ],
          "options": [
            "Reduced harmonic distortion and losses",
            "Simpler control algorithm design",
            "Higher DC-link voltage requirement",
            "Direct current output generation"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "For the EV low-voltage electrical system, what critical safety function do TSAL/RTDS systems typically fulfill in competition environments?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "EV low-voltage electrical system",
            "TSAL",
            "RTDS",
            "safety interlocks",
            "automotive electronics"
          ],
          "options": [
            "Indicate high voltage system active status",
            "Control motor speed based on driver input",
            "Manage battery charging and discharging cycles",
            "Provide autonomous driving assistance"
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "In your Motor Speed Synchronisation project using PID control, what was the primary challenge when fine-tuning the Arduino firmware?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Motor Speed Synchronisation",
            "PID Control",
            "Arduino firmware",
            "DC motors",
            "rotary encoders"
          ],
          "options": [
            "Minimizing speed error under varying load conditions",
            "Implementing encoder interrupt service routines",
            "Selecting the appropriate motor driver IC",
            "Calibrating the rotary encoder resolution"
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "During burn-in tests for the DC battery charger, what specific component stress issue related to magnetics did you isolate as a failure mode?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DC battery charger",
            "burn-in tests",
            "magnetics",
            "component stress",
            "failure modes"
          ],
          "options": [
            "Core saturation or overheating",
            "Inductive coupling leading to EMI",
            "Winding capacitance variations",
            "Parasitic resistance drift"
          ],
          "correctIndex": 0
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Eagle",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 3
        },
        {
          "questionId": "2",
          "answer": "Analog-to-digital converters",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Simpler control algorithm design",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "Control motor speed based on driver input",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 2
        },
        {
          "questionId": "5",
          "answer": "Implementing encoder interrupt service routines",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "Inductive coupling leading to EMI",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        }
      ]
    },
    "s_1759363279120": {
      "id": "s_1759363279120",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what was the primary benefit of using virtualized rendering for handling 1,000+ CSV rows efficiently?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Next.js",
            "virtualized rendering",
            "DataAlchemist",
            "Tailwind CSS"
          ],
          "options": [
            "Improved SEO for the platform.",
            "Reduced initial bundle size.",
            "Enhanced performance and UI responsiveness.",
            "Simplified data fetching mechanisms."
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, which database did you utilize to store real-time metrics for over 50 crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "SQLite"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In MangaFlow, how did Manifest V3's background service workers specifically enhance the Chrome extension's event-driven architecture?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Chrome Extensions API",
            "background service workers"
          ],
          "options": [
            "Allowed synchronous network requests from content scripts.",
            "Provided persistent, long-running background scripts.",
            "Enabled efficient, event-driven processing with a short lifecycle.",
            "Granted direct DOM manipulation across all manga platforms."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "How did NATS pub-sub messaging specifically contribute to the CryptoMetrics backend's functionality for delivering updates?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub messaging",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "Managed user authentication and authorization.",
            "Broadcasted real-time data updates to subscribed services.",
            "Facilitated durable storage of cryptocurrency metrics.",
            "Optimized database query performance for large datasets."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "When integrating Google Gemini API in DataAlchemist, what primary benefit resulted from converting natural language rules into executable logic?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Google Gemini API",
            "DataAlchemist",
            "natural language",
            "executable logic",
            "validation errors"
          ],
          "options": [
            "Reduced the overall client-side bundle size.",
            "Ensured more efficient client-side data caching.",
            "Minimized validation errors in the rule application.",
            "Accelerated the initial page load time."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "For CryptoMetrics, how did implementing cron-based syncing and retry logic specifically address CoinGecko API constraints?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "cron-based syncing",
            "retry logic",
            "rate limits"
          ],
          "options": [
            "Reduced data storage requirements by optimizing schemas.",
            "Provided real-time user notifications for price changes.",
            "Ensured data freshness while respecting API rate limits.",
            "Simplified the process of API key management."
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Reduced initial bundle size.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 16
        },
        {
          "questionId": "2",
          "answer": "",
          "selectedIndex": -1,
          "isCorrect": false,
          "timeUsed": 4
        },
        {
          "questionId": "3",
          "answer": "Provided persistent, long-running background scripts.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 8
        },
        {
          "questionId": "4",
          "answer": "Broadcasted real-time data updates to subscribed services.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Ensured more efficient client-side data caching.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "Provided real-time user notifications for price changes.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        }
      ]
    },
    "s_1759363521744": {
      "id": "s_1759363521744",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, what was the primary function of Papa Parse?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "Papa Parse",
            "CSV"
          ],
          "options": [
            "Parsing CSV files for rule-based logic",
            "Rendering virtualized lists of data",
            "Integrating with the Google Gemini API",
            "Managing real-time user authentication"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the Reverie Diary app, why was LocalStorage chosen for data management?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "LocalStorage",
            "client-side"
          ],
          "options": [
            "To store persistent client-side data without a backend",
            "To cache API responses from Google Gemini",
            "To synchronize data across multiple user devices",
            "To implement server-side session management"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "In CryptoMetrics, what was the primary role of NATS pub-sub messaging?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "real-time"
          ],
          "options": [
            "Broadcasting real-time crypto data updates to services",
            "Storing persistent crypto metrics for analysis",
            "Handling HTTP requests from client applications",
            "Scheduling cron jobs for data synchronization"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, what benefit did MongoDB provide for storing diverse crypto asset data?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "crypto data",
            "NoSQL"
          ],
          "options": [
            "Its flexibility for evolving schema of various crypto metrics",
            "Strict relational integrity for financial transactions",
            "Real-time graph analysis capabilities",
            "Efficient caching of static API responses"
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "In DataAlchemist, how was efficient rendering of 1,000+ rows achieved for the responsive interface?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "responsive UI",
            "Tailwind CSS"
          ],
          "options": [
            "Through virtualized rendering techniques",
            "By paginating data on the client-side",
            "Using server-side rendering for every row",
            "Implementing a lazy-loading image strategy"
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "To maintain data freshness and handle API rate limits in CryptoMetrics, what specific strategies were employed?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron",
            "rate limits",
            "retry logic",
            "CoinGecko API"
          ],
          "options": [
            "Cron-based syncing and retry logic",
            "Implementing client-side caching mechanisms",
            "Using serverless functions for data fetching",
            "Distributing requests across multiple IP addresses"
          ],
          "correctIndex": 0
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Parsing CSV files for rule-based logic",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 5
        },
        {
          "questionId": "2",
          "answer": "To synchronize data across multiple user devices",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 6
        },
        {
          "questionId": "3",
          "answer": "Handling HTTP requests from client applications",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 6
        },
        {
          "questionId": "4",
          "answer": "Its flexibility for evolving schema of various crypto metrics",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 6
        },
        {
          "questionId": "5",
          "answer": "Implementing a lazy-loading image strategy",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 8
        },
        {
          "questionId": "6",
          "answer": "Distributing requests across multiple IP addresses",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 6
        }
      ]
    },
    "s_1759364134735": {
      "id": "s_1759364134735",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For the ZVT Bi-Directional DC-DC converter, manipulating Arduino Mega hardware timers achieved what primary goal?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Arduino Mega",
            "hardware timers",
            "ZVT Bi-Directional DC-DC converter",
            "firmware"
          ],
          "options": [
            "Generated synchronized, high-precision control signals.",
            "Performed data logging to an SD card.",
            "Managed user interface button presses.",
            "Controlled serial communication baud rates."
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "When fine-tuning the PID control algorithm for motor speed synchronization on Arduino, what does the 'D' term primarily address?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PID control",
            "Arduino",
            "motor speed synchronization",
            "firmware"
          ],
          "options": [
            "Anticipates future errors to reduce overshoot and oscillation.",
            "Corrects for accumulated past errors over time.",
            "Responds proportionally to the current error.",
            "Filters out high-frequency noise from sensor readings."
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "In designing the low-cost single-phase inverter and SPWM generator, what is a common approach to improving output waveform quality?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "SPWM",
            "inverter design",
            "EG8010 IC",
            "feedback control"
          ],
          "options": [
            "Increasing the switching frequency of the SPWM carrier.",
            "Reducing the number of switching components.",
            "Implementing open-loop voltage control only.",
            "Minimizing the DC bus voltage."
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "During burn-in tests for the DC battery charger, which method is most effective for isolating failure modes related to component stress?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DC battery charger",
            "burn-in tests",
            "failure modes",
            "oscilloscope",
            "logic analyzer"
          ],
          "options": [
            "Operating the prototype continuously under worst-case conditions.",
            "Visually inspecting all solder joints only.",
            "Simulating component failures in software.",
            "Testing only at room temperature and nominal load."
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "For the EV low-voltage electrical system, implementing critical safety interlocks and TSAL/RTDS systems typically involves:",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "EV low-voltage electrical system",
            "safety interlocks",
            "TSAL/RTDS",
            "FMEA"
          ],
          "options": [
            "Designing fail-safe mechanisms that prevent operation upon fault detection.",
            "Relying solely on operator vigilance to prevent accidents.",
            "Using standard automotive fuses without additional logic.",
            "Implementing software with no hardware redundancy."
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "When implementing feedback control loops for the EG8010-based pure sine wave inverter, what is crucial for stable output under varying loads?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Pure Sine Wave Inverter",
            "EG8010 IC",
            "feedback control loops",
            "stable output"
          ],
          "options": [
            "Ensuring sufficient phase margin and gain margin in the control loop.",
            "Maximizing the ripple voltage to aid filtering.",
            "Operating the inverter without any load always.",
            "Relying solely on open-loop voltage regulation."
          ],
          "correctIndex": 0
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Performed data logging to an SD card.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "Responds proportionally to the current error.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 18
        },
        {
          "questionId": "3",
          "answer": "Reducing the number of switching components.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "Testing only at room temperature and nominal load.",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 2
        },
        {
          "questionId": "5",
          "answer": "Designing fail-safe mechanisms that prevent operation upon fault detection.",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "Maximizing the ripple voltage to aid filtering.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 3
        }
      ]
    },
    "s_1759364609098": {
      "id": "s_1759364609098",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, what was the primary purpose of integrating Chart.js?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Chart.js",
            "Reverie Diary",
            "mood trends"
          ],
          "options": [
            "To implement advanced UI animations and transitions.",
            "To visualize mood trends, dream elements, and psychological symbols.",
            "To manage client-side data persistence without a backend.",
            "To parse CSV data for dream entries and interpretations."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For CryptoMetrics, why was MongoDB chosen to store metrics like price, market cap, and volume for crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics",
            "price",
            "market cap"
          ],
          "options": [
            "To manage strictly relational data with predefined schemas.",
            "To store diverse and frequently updated crypto data with schema flexibility.",
            "To facilitate complex SQL joins across multiple data sources.",
            "To enable pub-sub messaging between microservices."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "DataAlchemist efficiently handled 1,000+ rows. Which technique specifically contributed to its responsive UI performance?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "performance"
          ],
          "options": [
            "Extensive use of server-side rendering for every data update.",
            "Lazy loading individual data cells only when clicked.",
            "Virtualized rendering, showing only rows currently visible in the viewport.",
            "Caching all 1,000+ rows in the browser's LocalStorage."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, NATS pub-sub messaging was employed for what primary purpose?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "real-time"
          ],
          "options": [
            "To store historical crypto data for long-term analysis.",
            "To manage user authentication and authorization flows.",
            "To broadcast real-time data updates to subscribed services.",
            "To schedule cron-based jobs for data syncing."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "MangaFlow utilized Manifest V3. What is a key architectural change introduced by Manifest V3 compared to V2?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Chrome Extensions API",
            "service workers"
          ],
          "options": [
            "Deprecation of persistent background pages in favor of event-driven service workers.",
            "Strict requirement for all extensions to use React.js for their UI.",
            "Removal of the `chrome.storage` API for user preferences.",
            "Mandatory synchronous network requests for all API calls."
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "CryptoMetrics implemented cron-based syncing and retry logic. What challenge did this primarily address?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron",
            "retry logic",
            "API rate limits",
            "freshness"
          ],
          "options": [
            "Ensuring data consistency across multiple MongoDB replicas.",
            "Handling CoinGecko API rate limits and maintaining data freshness.",
            "Optimizing Node.js server-side rendering performance.",
            "Facilitating real-time user-to-user chat functionalities."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "To visualize mood trends, dream elements, and psychological symbols.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 28
        },
        {
          "questionId": "2",
          "answer": "To facilitate complex SQL joins across multiple data sources.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Lazy loading individual data cells only when clicked.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "To schedule cron-based jobs for data syncing.",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "Strict requirement for all extensions to use React.js for their UI.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Optimizing Node.js server-side rendering performance.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759364823988": {
      "id": "s_1759364823988",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist, which utility-first CSS framework was used to build the responsive styled interface?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "DataAlchemist",
            "Tailwind CSS",
            "responsive styled interface"
          ],
          "options": [
            "Tailwind CSS",
            "Chart.js",
            "P5.js",
            "Three.js"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics backend, which NoSQL database was chosen to store real-time metrics for 50+ crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "NoSQL",
            "real-time metrics"
          ],
          "options": [
            "MongoDB",
            "MySQL",
            "Postman",
            "NATS"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "In the Reverie Diary app, how was real-time, persistent client-side data managed without relying on a separate backend system?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Reverie Diary",
            "LocalStorage",
            "client-side data",
            "persistent"
          ],
          "options": [
            "LocalStorage",
            "MongoDB",
            "NATS",
            "Google Gemini API"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "In the CryptoMetrics backend, which technology was employed to broadcast real-time updates to various services in a pub-sub fashion?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub messaging",
            "real-time updates"
          ],
          "options": [
            "NATS pub-sub",
            "REST API",
            "Google Gemini API",
            "Papa Parse"
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "For the MangaFlow Chrome extension, how did Manifest V3's background service workers contribute to its efficient, event-driven architecture?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Chrome Extensions API",
            "background service workers"
          ],
          "options": [
            "They enabled persistent background pages for continuous scripting.",
            "They allowed dynamic execution of code only when triggered by events.",
            "They provided direct DOM access to external websites for styling.",
            "They facilitated server-side processing for auto-scrolling logic."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "In CryptoMetrics, what was the primary purpose of implementing cron-based syncing and retry logic for the CoinGecko API?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "cron-based syncing",
            "retry logic",
            "API rate limits"
          ],
          "options": [
            "To reduce the overall data storage footprint in MongoDB.",
            "To ensure data freshness and robustly handle external API rate limits.",
            "To enable client-side caching of crypto data for faster retrieval.",
            "To distribute API requests across multiple backend servers."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Tailwind CSS",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 27
        },
        {
          "questionId": "2",
          "answer": "MongoDB",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "LocalStorage",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "NATS pub-sub",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "They enabled persistent background pages for continuous scripting.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "To reduce the overall data storage footprint in MongoDB.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759364918393": {
      "id": "s_1759364918393",
      "candidate": {
        "name": "Atul Tiwari",
        "email": "atultiwari00497@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "For your ZVT Bi-Directional DC-DC converter firmware, what is the primary benefit of hardware timers over software delays for generating control signals?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Arduino Mega",
            "hardware timers",
            "control signals",
            "DC-DC converter"
          ],
          "options": [
            "Reduced code complexity",
            "Deterministic timing and precision",
            "Lower CPU utilization in general tasks",
            "Simpler debugging process"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Which phase in the workflow for your custom ZVT Bi-Directional DC-DC converter PCB involved Altium Designer or Eagle for its core functionality?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PCB design",
            "Altium Designer",
            "Eagle",
            "schematic capture",
            "layout"
          ],
          "options": [
            "Component sourcing and procurement",
            "Final board assembly and soldering",
            "Firmware integration and testing",
            "Schematic capture and PCB layout"
          ],
          "correctIndex": 3
        },
        {
          "id": "3",
          "text": "In your single-phase inverter design with SPWM and the EG8010 IC, what is the primary goal of implementing feedback control loops?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Inverter",
            "SPWM",
            "EG8010 IC",
            "feedback control"
          ],
          "options": [
            "To simplify the power stage design",
            "To ensure a stable, pure sine wave output",
            "To reduce the overall bill of materials",
            "To increase the inverter's maximum power rating"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "When testing your DC battery charger prototype, what was the primary purpose of conducting \"multi-hour burn-in tests\" to isolate failure modes?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DC battery charger",
            "burn-in tests",
            "failure modes",
            "magnetics",
            "component stress"
          ],
          "options": [
            "To validate the software control logic",
            "To measure peak power consumption",
            "To identify early life component failures",
            "To determine maximum operating temperature"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "For your Arduino PID motor synchronization, if motors consistently overshoot the target RPM, which PID parameter adjustment is the most effective initial step?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "PID control",
            "Arduino firmware",
            "motor synchronization",
            "overshoot"
          ],
          "options": [
            "Increase the Proportional (P) gain",
            "Decrease the Integral (I) gain",
            "Increase the Derivative (D) gain",
            "Decrease the Derivative (D) gain"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In the EV low-voltage system for Team Srijan, what crucial safety condition is the TSAL/RTDS system specifically designed to alert about and manage?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "EV low-voltage electrical system",
            "safety interlocks",
            "TSAL/RTDS",
            "FMEA"
          ],
          "options": [
            "Over-current in auxiliary circuits",
            "Tractive System High Voltage is Active",
            "Low battery charge status",
            "Motor controller overheating"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Deterministic timing and precision",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 3
        },
        {
          "questionId": "2",
          "answer": "Firmware integration and testing",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "To increase the inverter's maximum power rating",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "To measure peak power consumption",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Increase the Proportional (P) gain",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Low battery charge status",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759364980220": {
      "id": "s_1759364980220",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "Given Ethan's experience working on React projects (`Skill□□□□□`), which Hook is primarily used for managing component-specific state in a functional component?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "useState",
            "Skill□□□□□"
          ],
          "options": [
            "useState",
            "useEffect",
            "useContext",
            "useRef"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "Based on work with a PostgreSQL backend (`Description`) and database skills (`Skill□□□□□`), which SQL command set is used to retrieve data with filtering criteria?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PostgreSQL",
            "SQL",
            "Description",
            "Skill□□□□□"
          ],
          "options": [
            "SELECT ... WHERE ...",
            "INSERT INTO ... VALUES ...",
            "UPDATE ... SET ...",
            "DELETE FROM ... WHERE ..."
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "Considering Ethan's involvement in a Next.js project (`Description`), what is a key advantage of utilizing Server-Side Rendering (SSR) for user-facing applications?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Next.js",
            "SSR",
            "Description"
          ],
          "options": [
            "Improves initial content paint and SEO for search engines",
            "Significantly reduces the overall server load",
            "Primarily enhances client-side interactivity after load",
            "Simplifies complex asynchronous data fetching logic"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "If Ethan implemented a serverless microservice using AWS Lambda (`Skill□□□□□`), which of these is a plausible event source that could trigger its execution?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "AWS Lambda",
            "Microservices",
            "Skill□□□□□"
          ],
          "options": [
            "An API Gateway request",
            "A message in an SQS Queue",
            "An object upload to an S3 Bucket",
            "All of the above"
          ],
          "correctIndex": 3
        },
        {
          "id": "5",
          "text": "For performance optimization in a complex React component (`Description`), what is the primary role of the `useMemo` Hook when calculating values?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React",
            "useMemo",
            "Description"
          ],
          "options": [
            "Memorizes a value, preventing re-calculation on re-renders unless dependencies change",
            "Manages asynchronous operations and side effects after render",
            "Provides a stable reference to a mutable value across renders",
            "Facilitates passing data down the component tree without prop drilling"
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "When designing a distributed backend system (`Description`) that absolutely requires strong transactional consistency across multiple distinct services, what pattern is most appropriate?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Distributed systems",
            "Consistency",
            "Description"
          ],
          "options": [
            "Two-Phase Commit (2PC)",
            "Saga Pattern",
            "Eventual Consistency with Conflict Resolution",
            "Asynchronous Message Queues for eventual delivery"
          ],
          "correctIndex": 0
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 84
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 238
        },
        {
          "questionId": "3",
          "answer": "Significantly reduces the overall server load",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "A message in an SQS Queue",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "Memorizes a value, preventing re-calculation on re-renders unless dependencies change",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Two-Phase Commit (2PC)",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 0
        }
      ]
    },
    "s_1759365220319": {
      "id": "s_1759365220319",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "Given Ethan's experience with React, what's the primary way data flows from a parent component to its child component?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React"
          ],
          "options": [
            "State",
            "Props",
            "Context",
            "Redux"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Considering Ethan's experience with PostgreSQL, which SQL clause is used to filter records based on a specified condition?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PostgreSQL"
          ],
          "options": [
            "JOIN",
            "GROUP BY",
            "WHERE",
            "ORDER BY"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "Ethan has worked with React and Webpack. How would he typically implement lazy loading for a React component using Webpack?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "React",
            "Webpack"
          ],
          "options": [
            "Importing it synchronously",
            "Using React.lazy and Suspense",
            "Placing it in a separate HTML file",
            "Loading it via an AJAX request"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "Given Ethan's experience building RESTful APIs with Node.js, which HTTP method is typically used to update an existing resource?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Node.js",
            "RESTful API"
          ],
          "options": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "Ethan leverages Redux for state management. How would he typically manage asynchronous side effects like API calls within Redux?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Redux"
          ],
          "options": [
            "Directly in reducers",
            "Using `componentDidMount`",
            "With middleware like Redux Thunk or Saga",
            "Through local component state"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "With Ethan's use of Docker and AWS, what's a common strategy for ensuring a highly available PostgreSQL database on AWS?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Docker",
            "AWS",
            "PostgreSQL"
          ],
          "options": [
            "Running it on a single EC2 instance",
            "Using AWS RDS Multi-AZ deployment",
            "Storing backups in S3 without replication",
            "Manual failover process only"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "State",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "JOIN",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Using React.lazy and Suspense",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "PUT",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Directly in reducers",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Using AWS RDS Multi-AZ deployment",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 2
        }
      ]
    },
    "s_1759365325956": {
      "id": "s_1759365325956",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "If Ethan's experience includes building React applications, which Hook is the standard for managing component-specific state, such as a user input field?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "Hook",
            "state management"
          ],
          "options": [
            "useState",
            "useEffect",
            "useContext",
            "useReducer"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "Given Ethan's likely experience with database technologies, which SQL keyword is used to retrieve data from two or more tables based on a related column?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "SQL",
            "database",
            "data retrieval"
          ],
          "options": [
            "MERGE",
            "UNION",
            "JOIN",
            "CONNECT"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "If Ethan implemented complex asynchronous data flows in a Redux application, what common middleware library is typically used to handle side effects?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Redux",
            "asynchronous actions",
            "middleware"
          ],
          "options": [
            "Redux Logger",
            "Redux Persist",
            "Redux Thunk",
            "Redux Form"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "Assuming Ethan's cloud experience includes AWS, which service would he use to run event-driven code in a serverless compute environment?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "AWS",
            "serverless",
            "event-driven compute"
          ],
          "options": [
            "EC2",
            "S3",
            "Lambda",
            "RDS"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "To optimize a production React application bundled with Webpack, which technique would Ethan employ to remove unused code and reduce the final bundle size?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Webpack",
            "React",
            "optimization",
            "bundle size"
          ],
          "options": [
            "Code Splitting",
            "Lazy Loading",
            "Tree Shaking",
            "Hot Module Replacement"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "When designing RESTful APIs for a distributed microservices system, what principle ensures that repeated requests to an endpoint produce the same result, preventing unintended side effects?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "RESTful APIs",
            "microservices",
            "API design",
            "distributed systems"
          ],
          "options": [
            "Atomicity",
            "Consistency",
            "Durability",
            "Idempotency"
          ],
          "correctIndex": 3
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "useState",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "MERGE",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 60
        },
        {
          "questionId": "4",
          "answer": "EC2",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "Lazy Loading",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "Consistency",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759365742831": {
      "id": "s_1759365742831",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "In a React component, assuming Ethan has experience with modern frontend frameworks, what is the primary purpose of the `useState` hook?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "useState",
            "frontend"
          ],
          "options": [
            "To perform side effects like data fetching.",
            "To manage component-local state within a functional component.",
            "To optimize component re-renders and prevent unnecessary updates.",
            "To access global context values without prop drilling."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "When building RESTful APIs (a common backend task), which HTTP method is typically used to retrieve an existing resource?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "REST API",
            "HTTP methods",
            "backend"
          ],
          "options": [
            "POST",
            "PUT",
            "DELETE",
            "GET"
          ],
          "correctIndex": 3
        },
        {
          "id": "3",
          "text": "If Ethan's experience includes Next.js, which function is ideal for fetching data at request time on the server side, before a page component renders?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Next.js",
            "Server-Side Rendering",
            "Data Fetching"
          ],
          "options": [
            "`getStaticProps`",
            "`getServerSideProps`",
            "`getInitialProps` (deprecated for new pages)",
            "`useSWR`"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "Assuming database experience like PostgreSQL, what ACID property ensures that all changes within a transaction are either committed or rolled back entirely?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "PostgreSQL",
            "Database",
            "ACID",
            "Transactions"
          ],
          "options": [
            "Atomicity",
            "Consistency",
            "Isolation",
            "Durability"
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "If Ethan has optimized frontend build processes with tools like Webpack, which technique delays loading non-essential JavaScript code until it's actually needed?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Webpack",
            "Performance Optimization",
            "Code Splitting"
          ],
          "options": [
            "Module Hashing",
            "Tree Shaking",
            "Code Splitting",
            "Uglification/Minification"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "For backend development involving serverless microservices (e.g., AWS Lambda), what is a key challenge for managing shared state across multiple function invocations?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "AWS Lambda",
            "Microservices",
            "Serverless",
            "State Management"
          ],
          "options": [
            "Cold start latency impacts response time, not state.",
            "Ephemeral local storage, as each invocation runs in a new, isolated environment.",
            "VPC integration complexities for private network access.",
            "API Gateway throttling for managing request rates."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "To manage component-local state within a functional component.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 6
        },
        {
          "questionId": "2",
          "answer": "POST",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "`getServerSideProps`",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "Atomicity",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Code Splitting",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Cold start latency impacts response time, not state.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759365871370": {
      "id": "s_1759365871370",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Payment Gateway project, which database was utilized to persist payment transaction information?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway",
            "Spring Boot",
            "MySQL",
            "Backend"
          ],
          "options": [
            "MongoDB",
            "PostgreSQL",
            "MySQL",
            "Redis"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "For the Library Management System, which specific methodology was applied to ensure the quality of core service logic?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "TDD",
            "JUnit",
            "Spring Boot",
            "Backend"
          ],
          "options": [
            "Manual end-to-end testing.",
            "Test-Driven Development (TDD) with JUnit.",
            "User acceptance testing only.",
            "Integration testing using Postman."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the Event-Driven Order Processing System, what mechanism was implemented with Kafka to ensure reliable handling of failed events?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven",
            "Apache Kafka",
            "Microservices",
            "fault tolerance",
            "dead-letter topics",
            "Backend"
          ],
          "options": [
            "Using synchronous acknowledgements for all messages.",
            "Implementing retry/backoff strategies and dead-letter topics.",
            "Disabling consumer groups to process events individually.",
            "Storing all failed events directly in a NoSQL database."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "As per your skills, if you were to build a dynamic UI component using React.js, what is the primary mechanism for managing its mutable, component-specific data?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "React.js",
            "Frontend",
            "UI component",
            "JavaScript"
          ],
          "options": [
            "Global JavaScript variables.",
            "Component state (e.g., using `useState` hook).",
            "Direct DOM manipulation.",
            "Storing data exclusively in URL parameters."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In your Real-Time Messaging application, how were user join/leave notifications and session management typically implemented with WebSockets?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "WebSocket (STOMP)",
            "SockJS",
            "session management",
            "Spring Boot",
            "Backend"
          ],
          "options": [
            "Polling the server at fixed intervals for status updates.",
            "Using HTTP long polling for user presence detection.",
            "Implementing WebSocket event listeners for connection lifecycle.",
            "Storing all session data in a relational database."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "To optimize the performance of paginated search APIs in the Library Management System, what technique was specifically applied to the MySQL database?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Library Management System",
            "paginated search",
            "DB indexes",
            "MySQL",
            "Hibernate",
            "Backend"
          ],
          "options": [
            "Denormalizing the entire database schema.",
            "Using a full-text search engine like Elasticsearch.",
            "Optimizing queries with appropriate database indexes.",
            "Increasing server RAM capacity for larger result sets."
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "MongoDB",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 16
        },
        {
          "questionId": "4",
          "answer": "Integration testing using Postman.",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 3
        },
        {
          "questionId": "2",
          "answer": "Implementing retry/backoff strategies and dead-letter topics.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "Direct DOM manipulation.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "Using HTTP long polling for user presence detection.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Optimizing queries with appropriate database indexes.",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 1
        }
      ]
    },
    "s_1759366050995": {
      "id": "s_1759366050995",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "How would you ensure state managed by Redux is consistently updated across multiple React components that subscribe to it?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "Redux",
            "state management"
          ],
          "options": [
            "Directly modify the Redux store state from each component.",
            "Dispatch actions that are processed by reducers, returning new state.",
            "Use React's local state management for global data.",
            "Pass props down multiple levels to all subscribed components."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "When building a RESTful API using Node.js/Express, which HTTP method is typically used to retrieve a resource collection?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Node.js",
            "Express",
            "REST API",
            "HTTP methods"
          ],
          "options": [
            "POST",
            "PUT",
            "GET",
            "DELETE"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "Ethan's resume implies proficiency in build tools. To optimize a large React application's initial load time, what Webpack configuration would you prioritize for bundle size?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Webpack",
            "React",
            "performance optimization",
            "bundle size"
          ],
          "options": [
            "Disabling tree shaking for all modules.",
            "Using `eval-source-map` for production builds.",
            "Implementing code splitting and lazy loading.",
            "Including all external libraries in the main bundle."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "Given Ethan's backend experience, when performing a series of interdependent database operations in PostgreSQL (e.g., deducting from one account, adding to another), how would you ensure atomicity?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "PostgreSQL",
            "database transactions",
            "atomicity"
          ],
          "options": [
            "Execute each operation independently and handle errors in application logic.",
            "Wrap all operations within a single database transaction.",
            "Use separate connections for each operation to parallelize.",
            "Rely on automatic commit after each statement."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "Assuming Ethan works with complex React applications, how can memoization using `React.memo` or `useMemo` specifically address unnecessary re-renders in a component that receives many props?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React",
            "performance",
            "re-renders",
            "memoization"
          ],
          "options": [
            "It forces the component to re-render more frequently.",
            "It prevents the component from ever re-rendering once mounted.",
            "It skips re-rendering if props or state have not deeply changed.",
            "It caches the component's rendered output, re-using it regardless of prop changes."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "Considering Ethan's backend experience potentially involving microservices and AWS, when designing a serverless microservice with AWS Lambda for a critical path, how would you manage cold starts to minimize latency?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Microservices",
            "AWS Lambda",
            "cold starts",
            "latency"
          ],
          "options": [
            "Provisioning a large amount of memory to increase execution speed.",
            "Using a cron job to periodically invoke the Lambda function.",
            "Deploying the Lambda function within a VPC without internet access.",
            "Increasing the Lambda timeout to allow for longer execution."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Directly modify the Redux store state from each component.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 7
        },
        {
          "questionId": "2",
          "answer": "PUT",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "Disabling tree shaking for all modules.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "Execute each operation independently and handle errors in application logic.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "It forces the component to re-render more frequently.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Provisioning a large amount of memory to increase execution speed.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759366640397": {
      "id": "s_1759366640397",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Payment Gateway project, which HTTP method did you implement for the REST endpoint responsible for \"creating payments\"?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway Standalone",
            "RESTful APIs",
            "Spring Boot"
          ],
          "options": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "Prajwal, your resume lists React.js. What is its core mechanism for efficiently updating the browser's Document Object Model (DOM) without direct manipulation?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React.js",
            "JavaScript"
          ],
          "options": [
            "Direct DOM manipulation",
            "Virtual DOM",
            "Shadow DOM",
            "jQuery DOM traversal"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "In your Kafka-based Event-Driven Order Processing System, what mechanism is primarily used to ensure an order event is processed only once, despite \"at-least-once\" delivery guarantees?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "at-least-once processing",
            "idempotency"
          ],
          "options": [
            "Utilizing consumer groups for parallel processing",
            "Implementing idempotent consumers in services",
            "Increasing the number of Kafka partitions",
            "Configuring 'exactly-once' delivery at the producer"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In your Library Management System, when implementing paginated search APIs with filters, how do \"appropriate DB indexes\" primarily contribute to performance optimization?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Library Management System",
            "MySQL",
            "DB indexes",
            "paginated search"
          ],
          "options": [
            "By reducing the overall database storage size",
            "By enforcing unique constraints on indexed columns",
            "By speeding up data retrieval and lookup times",
            "By automatically caching frequently accessed results"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "For your Real-Time Messaging application, when a client's network environment blocks standard WebSockets, how does SockJS provide fallback to maintain communication?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Real-Time Messaging Application",
            "WebSocket (STOMP)",
            "SockJS"
          ],
          "options": [
            "By routing messages through RabbitMQ instead",
            "By encrypting messages with a stronger TLS protocol",
            "By switching to HTTP polling or streaming techniques",
            "By using server-sent events (SSE) only"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "Considering your experience with Three.js and P5.js, what is their primary shared application in web development, often integrating with backend data to visualize?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Three.js",
            "P5.js",
            "JavaScript"
          ],
          "options": [
            "Developing server-side APIs and microservices",
            "Creating complex 2D/3D interactive graphics and visualizations",
            "Managing database connections and transactions",
            "Building high-performance UI component libraries"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 20
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "2",
          "answer": "Implementing idempotent consumers in services",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 27
        },
        {
          "questionId": "5",
          "answer": "By enforcing unique constraints on indexed columns",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "By encrypting messages with a stronger TLS protocol",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Creating complex 2D/3D interactive graphics and visualizations",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 0
        }
      ]
    },
    "s_1759366811235": {
      "id": "s_1759366811235",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, you crafted a polished UI using Tailwind CSS with specific visual effects. Which aspect primarily describes Tailwind CSS's approach to styling?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Tailwind CSS",
            "Reverie Diary",
            "UI"
          ],
          "options": [
            "Pre-defined components for rapid development.",
            "Utility-first classes for direct styling.",
            "CSS-in-JS for scoped styles.",
            "Visual drag-and-drop interface builder."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For CryptoMetrics, you used MongoDB to store real-time metrics. What is MongoDB primarily known for in database management?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics",
            "database"
          ],
          "options": [
            "Relational database management with SQL.",
            "Document-oriented NoSQL database.",
            "Graph database for network relationships.",
            "In-memory cache for session data."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "DataAlchemist handles 1,000+ rows efficiently using virtualized rendering. What problem does this technique primarily solve in UI development?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js"
          ],
          "options": [
            "Reducing server-side rendering latency.",
            "Optimizing database query performance.",
            "Improving performance by only rendering visible items.",
            "Enabling real-time data synchronization."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, NATS pub-sub messaging was employed to broadcast updates. What is a key benefit of using a pub-sub system like NATS for this purpose?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NATS",
            "CryptoMetrics",
            "pub-sub"
          ],
          "options": [
            "Ensuring strict transactional consistency across all services.",
            "Decoupling publishers from subscribers for scalable communication.",
            "Providing direct HTTP-based communication channels.",
            "Encrypting all data transmissions by default."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "MangaFlow uses Manifest V3 and background service workers for an event-driven architecture. What is a significant change regarding persistence for background scripts in Manifest V3?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "service workers",
            "Chrome Extensions API"
          ],
          "options": [
            "Background pages are always persistent throughout the browser session.",
            "Service workers are event-driven and terminate when idle.",
            "All background logic must now reside in content scripts.",
            "Persistent background scripts are managed solely by the operating system."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "CryptoMetrics uses cron-based syncing and retry logic to handle CoinGecko API rate limits. What challenge does this approach primarily address in a real-time data system?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron-based syncing",
            "retry logic",
            "API rate limits"
          ],
          "options": [
            "Minimizing database storage requirements.",
            "Ensuring data freshness and preventing service interruptions from external API constraints.",
            "Optimizing frontend rendering performance.",
            "Facilitating user authentication and authorization."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 20
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "Improving performance by only rendering visible items.",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 31
        },
        {
          "questionId": "4",
          "answer": "Decoupling publishers from subscribers for scalable communication.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 2
        },
        {
          "questionId": "5",
          "answer": "All background logic must now reside in content scripts.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "Minimizing database storage requirements.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 2
        }
      ]
    },
    "s_1759367401450": {
      "id": "s_1759367401450",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "Given Ethan's experience with Next.js in professional roles, what is its primary benefit for SEO compared to a pure client-side React application?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Next.js",
            "React",
            "SEO",
            "frontend"
          ],
          "options": [
            "Server-Side Rendering (SSR)",
            "Client-Side Routing",
            "Virtual DOM efficiency",
            "Automatic code splitting"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "With Ethan's Node.js API development background, which Express.js middleware is commonly used to parse incoming JSON payload bodies from POST requests?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Node.js",
            "Express.js",
            "API",
            "backend"
          ],
          "options": [
            "`express.static()`",
            "`express.json()`",
            "`cookie-parser`",
            "`morgan`"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "Referencing Ethan's experience with Redux and TypeScript, what is a best practice to ensure type safety for `dispatch` and `getState` in a complex Redux store setup?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Redux",
            "TypeScript",
            "type safety",
            "frontend"
          ],
          "options": [
            "Manually casting `dispatch` to `AnyAction`",
            "Using `TypedUseSelectorHook` and `TypedUseDispatchHook`",
            "Avoiding `dispatch` in functional components",
            "Declaring `RootState` as an `any` type"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "Given Ethan's background in database design with PostgreSQL, what is a key advantage of using a JSONB column over a traditional TEXT column for storing semi-structured data?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "PostgreSQL",
            "JSONB",
            "database",
            "backend"
          ],
          "options": [
            "Better storage efficiency for all data types",
            "Direct indexing and querying capabilities on JSON fields",
            "Automatic schema validation for stored JSON",
            "Native support for XML document storage"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "Considering Ethan's experience in optimizing web application performance, how might a custom Webpack plugin significantly improve a large React app's build process beyond standard loaders?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Webpack",
            "React",
            "performance",
            "optimization",
            "frontend"
          ],
          "options": [
            "By directly manipulating the Abstract Syntax Tree (AST) for targeted optimizations",
            "By automatically enabling browser caching for static assets",
            "By providing an alternative to Babel for JavaScript transpilation",
            "By simplifying the syntax for CSS-in-JS libraries"
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "With Ethan's background in microservices and AWS, how does deploying a serverless function (e.g., Lambda) for a service fundamentally differ from deploying a Docker container?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Microservices",
            "AWS Lambda",
            "Docker",
            "serverless",
            "backend"
          ],
          "options": [
            "Lambda requires manual server provisioning, while Docker does not.",
            "Docker typically handles scaling automatically, Lambda requires manual configuration.",
            "Lambda abstracts away infrastructure management, Docker requires OS-level control.",
            "Docker is always more cost-effective for applications with variable high traffic."
          ],
          "correctIndex": 2
        }
      ],
      "answers": []
    },
    "s_1759367439077": {
      "id": "s_1759367439077",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Which Spring Boot annotation defined endpoints like those for creating payments in your Payment Gateway project?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "Payment Gateway"
          ],
          "options": [
            "@Service",
            "@Repository",
            "@Controller",
            "@RestController"
          ],
          "correctIndex": 3
        },
        {
          "id": "2",
          "text": "In your Library Management System, which technology handled object-relational mapping with MySQL?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Hibernate",
            "MySQL",
            "Library Management System"
          ],
          "options": [
            "JDBC",
            "J2EE",
            "Spring Data JPA",
            "Hibernate"
          ],
          "correctIndex": 3
        },
        {
          "id": "3",
          "text": "For \"at-least-once processing\" in your Event-Driven Order Processing system using Kafka, how were consumer groups typically configured?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Apache Kafka",
            "Event-Driven Systems",
            "at-least-once",
            "consumer groups"
          ],
          "options": [
            "Disable auto-commits and commit manually",
            "Use exactly-once semantics only",
            "Ensure single consumer per topic",
            "Rely on broker acknowledgments"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "What was the main purpose of using STOMP with WebSockets in your Real-Time Messaging Application?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "WebSocket (STOMP)",
            "SockJS",
            "Real-Time Messaging Application"
          ],
          "options": [
            "Provide HTTP fallback for old browsers",
            "Offer a structured messaging protocol",
            "Secure WebSocket connections",
            "Manage database transactions"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "If a StockService consumer failed persistently in your Order Processing system, how would its retry strategy eventually manage the event?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Microservices",
            "Apache Kafka",
            "dead-letter topics",
            "retry/backoff",
            "Event-Driven Order Processing System"
          ],
          "options": [
            "Re-queue indefinitely on the main topic",
            "Instantly discard the event",
            "Move it to a dead-letter topic",
            "Broadcast to other services"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "Beyond basic message handling, how could Redis enhance the performance of your Real-Time Messaging Application?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Redis",
            "Real-Time Messaging Application",
            "Caching"
          ],
          "options": [
            "Guarantee message persistence",
            "Encrypt all message payloads",
            "Cache user session data or presence",
            "Perform complex message routing"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "@Repository",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 6
        },
        {
          "questionId": "2",
          "answer": "J2EE",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Use exactly-once semantics only",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "Manage database transactions",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Re-queue indefinitely on the main topic",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Cache user session data or presence",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 0
        }
      ]
    },
    "s_1759367745349": {
      "id": "s_1759367745349",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In DataAlchemist and Reverie Diary, you used Tailwind CSS. What is a primary benefit of using Tailwind CSS for styling user interfaces?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Tailwind CSS",
            "DataAlchemist",
            "Reverie Diary"
          ],
          "options": [
            "It provides a utility-first approach for rapid styling directly in markup.",
            "It enforces a strict component-based architecture for all UI elements.",
            "It automatically generates server-side rendered CSS for faster load times.",
            "It includes a built-in animation library for complex UI effects."
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics project, you chose MongoDB to store metrics. What type of database is MongoDB primarily classified as?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics"
          ],
          "options": [
            "A relational SQL database that uses tables and schemas.",
            "A document-oriented NoSQL database that stores data in flexible JSON-like documents.",
            "A graph database specialized for network-like data structures.",
            "A key-value store optimized for simple data retrieval by unique identifiers."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In DataAlchemist, you implemented virtualized rendering for displaying 1,000+ rows efficiently. What problem does this technique primarily solve in UI development?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js"
          ],
          "options": [
            "It reduces the number of network requests needed to fetch data.",
            "It improves search engine optimization (SEO) for dynamic content.",
            "It optimizes rendering performance by only displaying visible elements in large lists.",
            "It enables server-side data fetching for faster initial page loads."
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, NATS pub-sub messaging was employed to broadcast updates. What is the main architectural advantage of using a pub-sub pattern like NATS for such tasks?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NATS",
            "pub-sub messaging",
            "CryptoMetrics"
          ],
          "options": [
            "It ensures direct, synchronous client-server communication.",
            "It provides tight coupling between message producers and consumers.",
            "It allows for decoupled message producers and consumers, improving scalability.",
            "It guarantees strict message order preservation for all subscribers globally."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "For MangaFlow's Manifest V3 architecture, how do background service workers primarily differ in their lifecycle from Manifest V2's persistent background pages or event pages?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Chrome Extensions API",
            "service workers"
          ],
          "options": [
            "They remain active indefinitely in the background regardless of events.",
            "They execute directly on the browser's main UI thread, enhancing responsiveness.",
            "They are event-driven and terminate after handling events, waking up only when needed.",
            "They require explicit user interaction to activate and remain active."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In CryptoMetrics, what was the primary purpose of combining cron-based syncing with retry logic when fetching data from the CoinGecko API?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "cron-based syncing",
            "retry logic",
            "API rate limits"
          ],
          "options": [
            "To ensure database ACID compliance during data insertion.",
            "To facilitate real-time bidirectional communication with the API.",
            "To maintain data freshness while effectively handling and respecting API rate limits.",
            "To distribute the data fetching load across multiple API endpoints concurrently."
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "It enforces a strict component-based architecture for all UI elements.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 10
        },
        {
          "questionId": "2",
          "answer": "A graph database specialized for network-like data structures.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "It improves search engine optimization (SEO) for dynamic content.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "It provides tight coupling between message producers and consumers.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "They execute directly on the browser's main UI thread, enhancing responsiveness.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "To facilitate real-time bidirectional communication with the API.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759369952498": {
      "id": "s_1759369952498",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, which technology was key for crafting its polished UI with glassmorphism, metal textures, and animated loaders?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "Tailwind CSS",
            "UI"
          ],
          "options": [
            "Chart.js",
            "LocalStorage",
            "Tailwind CSS",
            "Google Gemini API"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics project, which database was utilized to store real-time metrics like price and market cap for 50+ crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "database"
          ],
          "options": [
            "MySQL",
            "PostgreSQL",
            "MongoDB",
            "SQLite"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In MangaFlow, Manifest V3 and background service workers were key to enabling what type of architecture for the Chrome extension?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "service workers",
            "Chrome Extensions API"
          ],
          "options": [
            "Server-side rendering",
            "Event-driven",
            "Monolithic",
            "Microservices"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "CryptoMetrics employed NATS pub-sub messaging. What was its primary function within this Node.js/Express.js backend system?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "As the main data persistence layer",
            "To broadcast real-time updates to services",
            "For managing scheduled cron jobs",
            "To handle external API rate limits"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "DataAlchemist utilized virtualized rendering to efficiently handle displaying 1,000+ rows. What is the primary benefit of this technique in a Next.js application?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "Next.js",
            "virtualized rendering",
            "performance"
          ],
          "options": [
            "It speeds up server-side rendering for initial load.",
            "It reduces DOM elements and significantly improves rendering performance.",
            "It automatically synchronizes data with the backend.",
            "It enables enhanced SEO capabilities for dynamic content."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "In DataAlchemist, how did the integration of Google Gemini API complement Papa Parse for streamlining CSV-based workflows?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "Google Gemini API",
            "Papa Parse",
            "CSV",
            "natural language"
          ],
          "options": [
            "Gemini directly parsed the CSV files, replacing Papa Parse's role.",
            "Gemini converted natural language rules into executable logic for parsed CSV data.",
            "Gemini was used exclusively for visualizing the parsed CSV data.",
            "Gemini provided cloud storage for the uploaded CSV documents."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Chart.js",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "MySQL",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Event-driven",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "For managing scheduled cron jobs",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "It reduces DOM elements and significantly improves rendering performance.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Gemini was used exclusively for visualizing the parsed CSV data.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759370256667": {
      "id": "s_1759370256667",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Reverie Diary project, which browser API did you leverage for persistent client-side data storage, notably without relying on a backend?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "LocalStorage",
            "React.js"
          ],
          "options": [
            "A. SessionStorage",
            "B. IndexedDB",
            "C. LocalStorage",
            "D. Web SQL Database"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For your CryptoMetrics backend, which NoSQL database did you use to store real-time metrics like price, market cap, and volume for crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "A. MySQL",
            "B. PostgreSQL",
            "C. MongoDB",
            "D. SQLite"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In DataAlchemist, how did Papa Parse directly contribute to automating logic mapping from uploaded CSVs, beyond basic file handling?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "Papa Parse",
            "CSV",
            "TypeScript"
          ],
          "options": [
            "A. Encrypting sensitive CSV data before upload.",
            "B. Parsing CSV content into a structured, consumable format.",
            "C. Validating CSV schema against predefined rules.",
            "D. Converting CSVs directly into executable logic."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "To broadcast real-time crypto updates and enable near real-time service communication in CryptoMetrics, what messaging system did you implement?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "Node.js"
          ],
          "options": [
            "A. Apache Kafka for distributed streaming.",
            "B. RabbitMQ for message queuing.",
            "C. NATS for lightweight pub-sub messaging.",
            "D. AWS SQS for managed queue services."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "MangaFlow utilized Manifest V3's background service workers. What key architectural characteristic do these offer that distinguishes them from V2's background pages?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "Service Workers",
            "Chrome Extensions API"
          ],
          "options": [
            "A. They are persistent across browser sessions and always active.",
            "B. They can directly manipulate the DOM of the host page.",
            "C. They are event-driven and terminate when idle to save resources.",
            "D. Service workers introduce a synchronous API for blocking network requests."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "For DataAlchemist to efficiently display 1,000+ CSV rows, beyond responsive styling with Tailwind CSS, what advanced rendering technique did you implement?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "Next.js",
            "Tailwind CSS"
          ],
          "options": [
            "A. Extensive server-side rendering for every data row.",
            "B. Infinite scrolling without any content virtualization.",
            "C. Client-side caching of the entire dataset for faster access.",
            "D. Virtualized rendering to display only the currently visible rows."
          ],
          "correctIndex": 3
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "C. LocalStorage",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 4
        },
        {
          "questionId": "2",
          "answer": "C. MongoDB",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "C. Validating CSV schema against predefined rules.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 4
        },
        {
          "questionId": "4",
          "answer": "C. NATS for lightweight pub-sub messaging.",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 5
        },
        {
          "questionId": "5",
          "answer": "A. They are persistent across browser sessions and always active.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 7
        },
        {
          "questionId": "6",
          "answer": "C. Client-side caching of the entire dataset for faster access.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 8
        }
      ]
    },
    "s_1759370427388": {
      "id": "s_1759370427388",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway project, what primary framework was used to build the RESTful APIs for processing payments?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "Payment Gateway"
          ],
          "options": [
            "React.js",
            "Node.js",
            "Spring Boot",
            "P5.js"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For easy testing of the Payment Gateway's REST APIs, what was specifically provided alongside cURL examples for interaction?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "HTML client",
            "RESTful APIs",
            "Payment Gateway"
          ],
          "options": [
            "A mobile application",
            "An HTML client page",
            "A desktop GUI tool",
            "Swagger UI"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System, how was at-least-once processing typically combined with idempotency using Kafka?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Apache Kafka",
            "Event-Driven Systems",
            "idempotency",
            "microservices"
          ],
          "options": [
            "Using a shared database lock for each event.",
            "Implementing consumer groups with unique message IDs.",
            "Skipping duplicate messages automatically.",
            "Processing all events multiple times for consistency."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "To optimize paginated search APIs with filters in the Library Management System, what was specifically used with MySQL?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "MySQL",
            "DB indexes",
            "query optimization",
            "Library Management System"
          ],
          "options": [
            "MongoDB aggregations",
            "Appropriate DB indexes",
            "Client-side caching with Redis",
            "NoSQL document structuring"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In the Real-Time Messaging Application, what was the primary purpose of configuring STOMP over WebSocket with SockJS fallback?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "WebSocket",
            "STOMP",
            "SockJS",
            "Real-Time Messaging Application"
          ],
          "options": [
            "To encrypt all message payloads.",
            "To provide a high-level messaging protocol and broad browser compatibility.",
            "To manage database connections efficiently.",
            "To implement server-side load balancing."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "Beyond retry/backoff strategies, how did the Event-Driven Order Processing System manage persistent failures for events that couldn't be processed?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Systems",
            "Apache Kafka",
            "dead-letter topics",
            "retry/backoff strategies"
          ],
          "options": [
            "By automatically discarding failed events after all retries.",
            "By routing them to dead-letter topics for later inspection.",
            "By manually restarting the entire microservice.",
            "By notifying the producer to resend the event indefinitely."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Node.js",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 17
        },
        {
          "questionId": "2",
          "answer": "A mobile application",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 2
        },
        {
          "questionId": "3",
          "answer": "Implementing consumer groups with unique message IDs.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 2
        },
        {
          "questionId": "4",
          "answer": "Client-side caching with Redis",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "To provide a high-level messaging protocol and broad browser compatibility.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "By automatically discarding failed events after all retries.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759411588261": {
      "id": "s_1759411588261",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Payment Gateway project, which core technologies were used for building the RESTful APIs and managing the backend database?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "MySQL"
          ],
          "options": [
            "Node.js with MongoDB",
            "Spring Boot with MySQL",
            "React.js with Redis",
            "P5.js with PostgreSQL"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "In the Library Management System, what approach did you apply with JUnit to ensure the robustness of the core service logic?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "TDD",
            "JUnit"
          ],
          "options": [
            "Applied Agile methodologies to testing",
            "Followed Test-Driven Development (TDD) principles",
            "Integrated Mockito for UI testing",
            "Used Jenkins for continuous integration"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In your Event-Driven Order Processing System, how did you ensure reliable communication and at-least-once processing between microservices?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven",
            "Apache Kafka",
            "Microservices"
          ],
          "options": [
            "Synchronous REST calls with transaction management",
            "Batch processing via scheduled cron jobs",
            "Event-driven communication using Kafka topics",
            "Direct database writes from all services"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "For your Real-Time Messaging Application, what technologies enabled real-time, event-driven message delivery with fallback?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "WebSocket",
            "STOMP",
            "SockJS",
            "RabbitMQ"
          ],
          "options": [
            "HTTP polling with JSON and MongoDB",
            "SSE with a dedicated API Gateway",
            "STOMP WebSocket with SockJS fallback and message broker",
            "RESTful APIs with Redis caching"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "In your Event-Driven Order Processing System, beyond at-least-once processing, how were event failures and potential duplicates specifically handled?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Apache Kafka",
            "dead-letter topics",
            "idempotency",
            "retry/backoff"
          ],
          "options": [
            "Automatic rollback of consumer transactions",
            "Manual intervention for failed message reprocessing",
            "Retry/backoff strategies and dead-letter topics, ensuring idempotency",
            "Real-time alerts to immediately stop all processing"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "In the Library Management System, what measures were implemented to optimize paginated searches with filters and secure different user roles?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Library Management System",
            "paginated search",
            "DB indexes",
            "role-based access"
          ],
          "options": [
            "Caching all search results and using client-side filtering",
            "Optimized queries with DB indexes and role-based access control",
            "Full-text search engine integration and API key authentication",
            "Limiting search criteria to prevent large queries"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "React.js with Redis",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 7
        },
        {
          "questionId": "2",
          "answer": "Followed Test-Driven Development (TDD) principles",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 3
        },
        {
          "questionId": "3",
          "answer": "Direct database writes from all services",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "SSE with a dedicated API Gateway",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Automatic rollback of consumer transactions",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Full-text search engine integration and API key authentication",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 1
        }
      ]
    },
    "s_1759412029978": {
      "id": "s_1759412029978",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway Standalone project, which combination of technologies was primarily used for the backend application logic and database persistence?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway",
            "Spring Boot",
            "MySQL",
            "RESTful APIs"
          ],
          "options": [
            "Java, Spring Boot, MySQL",
            "Python, Node.js, MongoDB",
            "React.js, Spring, Redis",
            "C++, Hibernate, RabbitMQ"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For asynchronous event processing in the Event-Driven Order Processing System, which specific messaging system was implemented between microservices?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Event-Driven Systems",
            "Apache Kafka",
            "Microservices"
          ],
          "options": [
            "RabbitMQ",
            "Apache Kafka",
            "WebSocket (STOMP)",
            "Redis Pub/Sub"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In the Library Management System, which ORM framework was used for database interaction, and which testing methodology was applied to core service logic?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Library Management System",
            "Hibernate",
            "TDD",
            "JUnit"
          ],
          "options": [
            "Spring Data JPA, Mockito",
            "Hibernate, TDD (JUnit)",
            "MyBatis, Agile",
            "JDBC, Integration Testing"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "For the Real-Time Messaging Application, how were real-time client communications configured, including fallbacks and message broker integration?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "WebSocket",
            "STOMP",
            "SockJS",
            "RabbitMQ",
            "Spring Boot"
          ],
          "options": [
            "HTTP long polling with JSON",
            "RESTful APIs with Redis caching",
            "STOMP WebSockets with SockJS fallback and message broker",
            "Server-Sent Events (SSE) with Kafka"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "The Event-Driven Order Processing System used Kafka consumer groups and idempotency to ensure what specific processing guarantee for events?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Architecture",
            "Apache Kafka",
            "at-least-once",
            "idempotency",
            "Microservices"
          ],
          "options": [
            "Exactly-once processing",
            "At-most-once processing",
            "At-least-once processing",
            "Best-effort processing"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "To enhance observability in the Event-Driven Order Processing System's microservices, what specific types of endpoints were included?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Microservices",
            "Observability",
            "Health",
            "Metrics",
            "Spring Boot",
            "Docker"
          ],
          "options": [
            "Debugging and logging endpoints",
            "Health and metrics endpoints",
            "Configuration and user management endpoints",
            "Performance and security endpoints"
          ],
          "correctIndex": 1
        }
      ],
      "answers": []
    },
    "s_1759412288920": {
      "id": "s_1759412288920",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "When managing state in a React application using Redux, what is the primary role of a 'selector' in Ethan's architecture?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "Redux",
            "state management"
          ],
          "options": [
            "To dispatch actions to the store.",
            "To define initial state for a reducer.",
            "To extract specific pieces of state from the Redux store.",
            "To combine multiple reducers into one root reducer."
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "In an Express.js backend, if Ethan implemented a GET request to `/users/:id` for a user profile, what is `:id` primarily used for?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Express.js",
            "REST API",
            "Node.js"
          ],
          "options": [
            "As a query parameter for filtering.",
            "To specify the HTTP method.",
            "To define a wildcard route.",
            "As a route parameter to identify a specific user."
          ],
          "correctIndex": 3
        },
        {
          "id": "3",
          "text": "Ethan's Next.js application leverages Server-Side Rendering (SSR). What is a key benefit of this approach for SEO compared to Client-Side Rendering (CSR)?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Next.js",
            "SSR",
            "SEO",
            "frontend performance"
          ],
          "options": [
            "Reduces the overall bundle size of the application.",
            "Allows search engine crawlers to easily index page content.",
            "Eliminates the need for JavaScript on the client-side.",
            "Improves client-side performance by offloading all computation to the server."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "When deploying a microservice architecture on AWS, Ethan opted for Amazon ECS with Fargate. What specific operational challenge does Fargate primarily address?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "AWS",
            "ECS",
            "Fargate",
            "Microservices"
          ],
          "options": [
            "Managing the underlying EC2 instances for containers.",
            "Orchestrating Kubernetes clusters.",
            "Providing serverless database solutions.",
            "Automating CI/CD pipelines."
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "Ethan observed a React component re-rendering unnecessarily due to frequently changing props from its parent. To optimize this, which React hook or HOC would be most suitable?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React",
            "performance",
            "memoization",
            "hooks"
          ],
          "options": [
            "`useEffect` with an empty dependency array.",
            "`useRef` to store the previous props.",
            "`React.memo` or `useMemo` for prop/value memoization.",
            "`useContext` to avoid prop drilling."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "Ethan's PostgreSQL application handles complex financial transactions. To ensure data consistency across multiple operations (e.g., debiting one account, crediting another), which ACID property is crucial and how is it achieved?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "PostgreSQL",
            "Transactions",
            "ACID",
            "data consistency"
          ],
          "options": [
            "Durability, by ensuring all writes are immediately flushed to disk.",
            "Isolation, by using transaction levels like `READ COMMITTED`.",
            "Atomicity, by grouping operations into a single, indivisible transaction.",
            "Consistency, by strictly enforcing foreign key constraints."
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "To dispatch actions to the store.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 7
        },
        {
          "questionId": "2",
          "answer": "To specify the HTTP method.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "Eliminates the need for JavaScript on the client-side.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "Orchestrating Kubernetes clusters.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "`useEffect` with an empty dependency array.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Durability, by ensuring all writes are immediately flushed to disk.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 1
        }
      ]
    },
    "s_1759412380229": {
      "id": "s_1759412380229",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway Standalone project, which Spring Boot annotation primarily defines a class as a RESTful controller responsible for handling HTTP requests?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "Payment Gateway Standalone"
          ],
          "options": [
            "`@Controller`",
            "`@RestController`",
            "`@Service`",
            "`@Component`"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the Library Management System, when implementing \"paginated search APIs\" with \"appropriate DB indexes\" using Hibernate and MySQL, what is a key benefit of indexes?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "Hibernate",
            "MySQL",
            "DB indexes"
          ],
          "options": [
            "To reduce the amount of data stored on disk.",
            "To speed up data retrieval operations (e.g., search, filtering).",
            "To enforce referential integrity constraints.",
            "To encrypt sensitive data in the database."
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System, using Apache Kafka for \"at-least-once processing\" and \"idempotency,\" how would the StockService consumer primarily handle duplicate messages?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "idempotency",
            "at-least-once processing"
          ],
          "options": [
            "By configuring Kafka to only deliver messages once.",
            "By implementing logic to track and disregard already processed message IDs.",
            "By immediately sending the message to a dead-letter topic.",
            "By acknowledging every message without validation."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "For the Real-Time Messaging Application, given the optional use of RabbitMQ, how might Redis be integrated to manage user presence or session data efficiently?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Real-Time Messaging Application",
            "WebSocket",
            "Redis",
            "session management"
          ],
          "options": [
            "As a primary long-term storage for all chat messages.",
            "To cache active user sessions or WebSocket connection metadata.",
            "To serve as the main message broker for STOMP.",
            "As a load balancer for incoming WebSocket connections."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In the Event-Driven Order Processing System, beyond simple retry/backoff, what is the primary architectural purpose of utilizing \"dead-letter topics\" for failed events?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "dead-letter topics",
            "retry/backoff",
            "microservices"
          ],
          "options": [
            "To automatically fix schema errors in event payloads.",
            "To re-queue messages for immediate processing without human intervention.",
            "To isolate and store problematic messages for later analysis and manual resolution.",
            "To reduce the overall latency of event processing."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "When applying \"TDD (JUnit)\" to the Library Management System's core service logic, how would Mockito be typically used to test a service method that depends on a repository?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Library Management System",
            "TDD",
            "JUnit",
            "Mockito",
            "core service logic"
          ],
          "options": [
            "To establish a full database connection for the test.",
            "To generate a proxy object for the repository that simulates its behavior.",
            "To automatically write test assertions based on service method signatures.",
            "To monitor the network traffic generated by the service calls."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 20
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 60
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "",
          "timeUsed": 65
        },
        {
          "questionId": "6",
          "answer": "",
          "timeUsed": 1
        }
      ]
    },
    "s_1759412739867": {
      "id": "s_1759412739867",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "If Ethan used React for the frontend, which lifecycle method or hook is best suited for fetching data immediately after a component mounts to the DOM?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "Frontend",
            "Lifecycle",
            "Data Fetching"
          ],
          "options": [
            "useEffect with an empty dependency array",
            "useMemo hook for data caching",
            "The 'render' method directly",
            "componentWillMount lifecycle method"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "In a backend API developed by Ethan using Express.js, which HTTP method is typically used to create a new resource on the server?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Express.js",
            "Backend",
            "REST API",
            "HTTP Methods"
          ],
          "options": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "Assuming Ethan's application uses Redux for state management, what is the primary purpose of a 'selector' function within the Redux flow?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Redux",
            "State Management",
            "Frontend",
            "Performance"
          ],
          "options": [
            "To dispatch actions to the store",
            "To define initial state for reducers",
            "To compute derived data and memoize results for components",
            "To handle asynchronous side effects"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "If Ethan needed to design a scalable backend for file storage and retrieval on AWS, which service combination would be most appropriate for large objects?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "AWS",
            "Backend",
            "Scalability",
            "File Storage"
          ],
          "options": [
            "RDS for database storage",
            "EC2 instance with local disk",
            "S3 for object storage with CloudFront for delivery",
            "DynamoDB for key-value storage"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "Ethan implemented a Next.js application. To pre-render a page on each request, fetching dynamic data specific to that request on the server-side, which function is used?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Next.js",
            "SSR",
            "Frontend Architecture",
            "Data Fetching"
          ],
          "options": [
            "getStaticProps",
            "getStaticPaths",
            "getServerSideProps",
            "useEffect with an API call"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "Ethan designed a microservices architecture using Docker containers. For asynchronous communication between services, what robust pattern is typically employed to handle events?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Microservices",
            "Docker",
            "Asynchronous Communication",
            "Backend Architecture"
          ],
          "options": [
            "Direct HTTP synchronous calls",
            "Shared database tables",
            "Message queue or event streaming platform (e.g., Kafka)",
            "Polling external APIs frequently"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "useEffect with an empty dependency array",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 6
        },
        {
          "questionId": "2",
          "answer": "GET",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "To dispatch actions to the store",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "RDS for database storage",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "getStaticProps",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Direct HTTP synchronous calls",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 1
        }
      ]
    },
    "s_1759412862280": {
      "id": "s_1759412862280",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the \"Payment Gateway Standalone\" project, what framework was used to build the REST application for processing and managing payments?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "Payment Gateway"
          ],
          "options": [
            "J2EE",
            "Spring Boot",
            "Node.js",
            "React.js"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "Which database was used in the \"Library Management System\" for managing books, users, and borrowing records?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "MySQL",
            "Database"
          ],
          "options": [
            "MongoDB",
            "Redis",
            "MySQL",
            "Apache Kafka"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "The \"Event-Driven Order Processing System\" used Apache Kafka. What strategy ensured \"at-least-once processing\" with consumer groups?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven",
            "Apache Kafka",
            "Idempotency",
            "At-least-once processing"
          ],
          "options": [
            "Manual acknowledgements",
            "Idempotency",
            "Synchronous API calls",
            "Single consumer per topic"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "When integrating Three.js into a React.js application, which React hook is typically used to manage the Three.js renderer lifecycle (e.g., initialization and cleanup)?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "React.js",
            "Three.js",
            "useEffect",
            "Frontend"
          ],
          "options": [
            "`useContext`",
            "`useMemo`",
            "`useState`",
            "`useEffect`"
          ],
          "correctIndex": 3
        },
        {
          "id": "5",
          "text": "Considering the \"Real-Time Messaging Application\" with WebSocket (STOMP) and SockJS, what is the primary role of STOMP in this setup?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "WebSocket",
            "STOMP",
            "Real-Time Messaging",
            "Messaging protocol"
          ],
          "options": [
            "Handling HTTP requests",
            "Providing a simple messaging protocol",
            "Encrypting WebSocket traffic",
            "Managing database connections"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "Given Prajwal's experience with Node.js and Microservices, what architectural pattern often uses Node.js to aggregate backend services for a single frontend view?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Node.js",
            "Microservices",
            "BFF",
            "Architectural Pattern",
            "Frontend"
          ],
          "options": [
            "Enterprise Service Bus",
            "Monolithic API",
            "Backend-for-Frontend (BFF)",
            "Event Sourcing"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Spring Boot",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 3
        },
        {
          "questionId": "2",
          "answer": "MySQL",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Manual acknowledgements",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "`useState`",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "Providing a simple messaging protocol",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "Enterprise Service Bus",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 13
        }
      ]
    },
    "s_1759412981695": {
      "id": "s_1759412981695",
      "candidate": {
        "name": "Ethan Yang",
        "email": ""
      },
      "questions": [
        {
          "id": "1",
          "text": "Given Ethan's experience in modern frontend development, which React hook is primarily used for managing component-level state in functional components?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React",
            "useState",
            "Frontend Development"
          ],
          "options": [
            "useEffect",
            "useContext",
            "useState",
            "useReducer"
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "For a backend service likely interacting with a database like PostgreSQL, which SQL command is fundamentally used to retrieve data from one or more tables?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "PostgreSQL",
            "SQL",
            "Backend Service",
            "Database"
          ],
          "options": [
            "INSERT INTO",
            "UPDATE SET",
            "SELECT FROM",
            "DELETE FROM"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "Considering Ethan's professional experience building robust frontend applications, what is the primary purpose of a 'loader' in a Webpack configuration?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Webpack",
            "Loader",
            "Frontend Applications",
            "Bundling"
          ],
          "options": [
            "To run development servers locally.",
            "To transform non-JavaScript files into modules.",
            "To optimize image and font assets.",
            "To manage application-wide state."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "Based on descriptions of building backend services, what HTTP method is conventionally used by a client to create a new resource on the server via a RESTful API?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "REST API",
            "HTTP Methods",
            "Backend Services",
            "Resource Creation"
          ],
          "options": [
            "GET",
            "PUT",
            "POST",
            "DELETE"
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "If Ethan implemented Redux for state management in a large React application, what mechanism ensures that only pure functions modify the application's central store state?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Redux",
            "React",
            "State Management",
            "Reducers"
          ],
          "options": [
            "Selectors",
            "Middleware",
            "Reducers",
            "Actions"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "When deploying containerized backend services using Docker, what specific Dockerfile instruction is used to copy files or directories from the build context into the image filesystem?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Docker",
            "Containerization",
            "Dockerfile",
            "Deployment"
          ],
          "options": [
            "RUN",
            "CMD",
            "COPY",
            "EXPOSE"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 20
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "",
          "timeUsed": 60
        },
        {
          "questionId": "4",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "Middleware",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 14
        },
        {
          "questionId": "6",
          "answer": "CMD",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759413399994": {
      "id": "s_1759413399994",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Payment Gateway project, which Spring Boot component primarily handles the incoming HTTP requests for creating payments?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway",
            "Spring Boot",
            "RESTful APIs",
            "Controller"
          ],
          "options": [
            "Controller",
            "Service",
            "Repository",
            "Entity"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "With your React.js experience, what is the main purpose of this library in web development?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React.js",
            "frontend"
          ],
          "options": [
            "Managing databases",
            "Building user interfaces",
            "Server-side routing",
            "Processing payments"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "For \"at-least-once\" processing in your Kafka-based Order Processing System, what did consumer groups primarily enable?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven Order Processing System",
            "Apache Kafka",
            "consumer groups",
            "at-least-once processing"
          ],
          "options": [
            "Distributing messages among consumers",
            "Ensuring strict message ordering",
            "Implementing exactly-once semantics",
            "Facilitating transactional commits"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "Your Real-Time Messaging App used SockJS fallback. What problem does SockJS primarily address for WebSocket clients?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Real-Time Messaging Application",
            "SockJS",
            "WebSocket"
          ],
          "options": [
            "Enabling server-side message persistence",
            "Providing fallback for older browsers",
            "Encrypting WebSocket traffic",
            "Managing user authentication"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "Your Event-Driven Order Processing System used retry/backoff strategies and dead-letter topics. What architectural principle do these patterns primarily address?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven Order Processing System",
            "microservices",
            "retry/backoff strategies",
            "dead-letter topics",
            "Fault tolerance"
          ],
          "options": [
            "Idempotency",
            "Observability",
            "Service discovery",
            "Fault tolerance"
          ],
          "correctIndex": 3
        },
        {
          "id": "6",
          "text": "Considering your use of Three.js and P5.js, what is a primary distinction in their common web development applications?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Three.js",
            "P5.js",
            "3D graphics",
            "2D interactive art"
          ],
          "options": [
            "Three.js for 3D graphics; P5.js for 2D interactive art",
            "Three.js for UI components; P5.js for data visualization",
            "Three.js for server-side rendering; P5.js for client-side routing",
            "Three.js for physics simulations; P5.js for database interactions"
          ],
          "correctIndex": 0
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 20
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        }
      ]
    },
    "s_1759414769098": {
      "id": "s_1759414769098",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, what distinct styling elements were used alongside Tailwind CSS to craft the polished UI, as described in your project?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "Tailwind CSS",
            "UI"
          ],
          "options": [
            "Glassmorphism and metal textures.",
            "Skeuomorphism and pixel art.",
            "Material Design and flat icons.",
            "Neumorphism and gradients."
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "Which specific database was utilized in your CryptoMetrics project to store real-time metrics for 50+ crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "database"
          ],
          "options": [
            "MongoDB",
            "MySQL",
            "PostgreSQL",
            "Redis"
          ],
          "correctIndex": 0
        },
        {
          "id": "3",
          "text": "For DataAlchemist, what was the primary reason for implementing virtualized rendering to handle 1,000+ rows efficiently?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "performance"
          ],
          "options": [
            "To reduce initial page load time and improve UI responsiveness.",
            "To enable server-side pagination for large datasets.",
            "To optimize database query performance on the client.",
            "To facilitate complex drag-and-drop operations."
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, NATS pub-sub messaging was employed to broadcast updates. What critical problem did this primarily address for downstream services?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "real-time"
          ],
          "options": [
            "Ensuring services receive near real-time data updates efficiently.",
            "Orchestrating complex microservice workflows.",
            "Managing distributed transactions across multiple databases.",
            "Providing a secure authentication layer for API access."
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "MangaFlow utilized Manifest V3 and background service workers. What key architectural shift did this introduce for extension event handling compared to Manifest V2?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Manifest V3",
            "background service workers",
            "Chrome Extensions API",
            "architecture"
          ],
          "options": [
            "Service workers are ephemeral, allowing for more memory-efficient event processing.",
            "Persistent background pages became the default for continuous operation.",
            "Event listeners now exclusively require direct user interaction to trigger.",
            "All network requests must be proxied through a mandatory remote server."
          ],
          "correctIndex": 0
        },
        {
          "id": "6",
          "text": "The CryptoMetrics project used cron-based syncing and retry logic for the CoinGecko API. This implementation strongly indicates a focus on:",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "cron-based syncing",
            "retry logic",
            "CoinGecko API",
            "rate limits",
            "reliability"
          ],
          "options": [
            "Data freshness and fault tolerance against external API rate limits.",
            "Horizontal scalability across multiple backend instances.",
            "End-to-end encryption for sensitive data transfers.",
            "Real-time analytics dashboards for system monitoring."
          ],
          "correctIndex": 0
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Skeuomorphism and pixel art.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 3
        },
        {
          "questionId": "2",
          "answer": "PostgreSQL",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "To enable server-side pagination for large datasets.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "Ensuring services receive near real-time data updates efficiently.",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Persistent background pages became the default for continuous operation.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Real-time analytics dashboards for system monitoring.",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 1
        }
      ]
    },
    "s_1759415274417": {
      "id": "s_1759415274417",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway Standalone project, which mechanism was primarily used to expose functionalities for creating and managing payments?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Payment Gateway",
            "Spring Boot",
            "RESTful APIs"
          ],
          "options": [
            "SOAP web services",
            "RESTful API endpoints",
            "gRPC interfaces",
            "Direct database access"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the Library Management System, which framework was specifically mentioned for applying TDD to core service logic?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "TDD",
            "JUnit"
          ],
          "options": [
            "Mockito",
            "Selenium",
            "JUnit",
            "TestNG"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System, how does implementing idempotency for Kafka consumers enhance system robustness with at-least-once delivery?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven",
            "Kafka",
            "at-least-once",
            "idempotency"
          ],
          "options": [
            "It prevents messages from being processed at all.",
            "It ensures each message is processed exactly once, even if delivered multiple times.",
            "It guarantees message order within a topic partition.",
            "It reduces the network overhead of message delivery."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "In the Real-Time Messaging Application, what is a likely role for Redis when integrated with STOMP WebSockets?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Real-Time Messaging",
            "WebSocket",
            "STOMP",
            "Redis"
          ],
          "options": [
            "Primary persistent storage for chat history.",
            "Caching user session data or transient message states.",
            "Asynchronous message queuing for delayed delivery.",
            "Managing long-running batch processing jobs."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "For the Event-Driven Order Processing System, what is the primary benefit of dead-letter topics and retry/backoff strategies for failed Kafka events?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven",
            "Microservices",
            "Kafka",
            "dead-letter topics",
            "retry/backoff"
          ],
          "options": [
            "To increase the overall throughput of Kafka topics.",
            "To enable synchronous communication between microservices.",
            "To manage and isolate unprocessable events, preventing consumer paralysis.",
            "To reduce the number of partitions required for high availability."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "When optimizing queries with DB indexes in the Library Management System using Hibernate, what is a key consideration for performance?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Library Management System",
            "Hibernate",
            "MySQL",
            "DB indexes",
            "optimized queries"
          ],
          "options": [
            "Hibernate automatically creates optimal indexes for all entities.",
            "Hibernate entity mapping for indexes directly ensures optimal DB indexing strategy.",
            "While Hibernate can map indexes, their effectiveness depends on underlying SQL and query patterns.",
            "Indexes are primarily for write operations, not for read-heavy paginated searches."
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "RESTful API endpoints",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 4
        },
        {
          "questionId": "2",
          "answer": "Mockito",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "It reduces the network overhead of message delivery.",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "Caching user session data or transient message states.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 3
        },
        {
          "questionId": "5",
          "answer": "To reduce the number of partitions required for high availability.",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "6",
          "answer": "Hibernate entity mapping for indexes directly ensures optimal DB indexing strategy.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759416002942": {
      "id": "s_1759416002942",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway project, which Spring annotation primarily defines a class as a RESTful web service controller?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "Payment Gateway"
          ],
          "options": [
            "@Service",
            "@Component",
            "@Repository",
            "@RestController"
          ],
          "correctIndex": 3
        },
        {
          "id": "2",
          "text": "For the Library Management System, when using Hibernate, which annotation maps a specific entity field to a database table column?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Hibernate",
            "MySQL",
            "Library Management System"
          ],
          "options": [
            "@Entity",
            "@Table",
            "@Id",
            "@Column"
          ],
          "correctIndex": 3
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System, what does \"at-least-once processing\" with Kafka consumer groups primarily imply?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Apache Kafka",
            "Event-Driven Systems",
            "Microservices"
          ],
          "options": [
            "Each message is delivered exactly once to one consumer.",
            "Messages are guaranteed to be processed by only one consumer.",
            "A message might be processed multiple times by different consumers.",
            "A message is delivered at least once, potentially multiple times, to one consumer."
          ],
          "correctIndex": 3
        },
        {
          "id": "4",
          "text": "The Real-Time Messaging Application used SockJS. What is the primary reason for configuring SockJS with WebSockets?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "WebSocket",
            "SockJS",
            "STOMP",
            "Real-Time Messaging Application"
          ],
          "options": [
            "To enable message persistence.",
            "To provide fallback options for browsers without native WebSocket support.",
            "To encrypt WebSocket communication.",
            "To manage user authentication sessions."
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "If building an interactive 3D product configurator using React, which listed library would be most suitable for the 3D rendering component?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "React.js",
            "Three.js",
            "P5.js",
            "Node.js"
          ],
          "options": [
            "P5.js",
            "Node.js",
            "Three.js",
            "React.js-dom"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "When applying TDD to a microservice like the OrderService, how would Mockito typically be used during unit testing?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "TDD",
            "JUnit",
            "Mockito",
            "Microservices",
            "OrderService"
          ],
          "options": [
            "To simulate network delays between services.",
            "To mock external dependencies like database calls or other service interfaces.",
            "To automatically generate test cases from API specifications.",
            "To deploy and run tests in a containerized environment."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "@Component",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 3
        },
        {
          "questionId": "2",
          "answer": "@Table",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "A message might be processed multiple times by different consumers.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "To enable message persistence.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Node.js",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "To mock external dependencies like database calls or other service interfaces.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 0
        }
      ]
    },
    "s_1759417219539": {
      "id": "s_1759417219539",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "Prajwal lists React.js. What is the primary purpose of the `useState` hook in a React functional component?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React.js",
            "useState"
          ],
          "options": [
            "To make asynchronous API calls.",
            "To manage component-specific state.",
            "To perform side effects after rendering.",
            "To optimize component re-renders."
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "In the \"Payment Gateway Standalone\", Prajwal used Spring Boot. Which HTTP method is typically used to retrieve a payment's status via a RESTful API?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "RESTful APIs",
            "Spring Boot",
            "Payment Gateway Standalone",
            "HTTP methods"
          ],
          "options": [
            "POST",
            "PUT",
            "GET",
            "DELETE"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "If Prajwal's React.js client interacts with the \"Payment Gateway Standalone\" API (Spring Boot REST), how would it typically create a new payment?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "React.js",
            "RESTful APIs",
            "Spring Boot",
            "Payment Gateway Standalone",
            "JSON",
            "HTTP methods"
          ],
          "options": [
            "Using an HTML form with a GET request.",
            "Sending an HTTP POST request with JSON data.",
            "Directly connecting to the MySQL database.",
            "Via a synchronous WebSocket connection."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "For the \"Event-Driven Order Processing System\", Prajwal ensured \"at-least-once processing\" with Kafka. What mechanism helps achieve this in Kafka consumers?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Apache Kafka",
            "Event-Driven Systems",
            "at-least-once processing",
            "consumer groups"
          ],
          "options": [
            "Manual offset committing after processing.",
            "Disabling consumer groups for each topic.",
            "Synchronous message production only.",
            "Configuring Kafka for single partition topics."
          ],
          "correctIndex": 0
        },
        {
          "id": "5",
          "text": "In his \"Event-Driven Order Processing System\", Prajwal used retry/backoff and dead-letter topics. What primary challenge do these patterns address in microservices?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Microservices",
            "Event-Driven Systems",
            "retry/backoff",
            "dead-letter topics"
          ],
          "options": [
            "Ensuring data consistency across distributed databases.",
            "Improving frontend UI rendering performance.",
            "Handling transient failures and unprocessable events.",
            "Reducing network latency between services."
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "Prajwal's \"Real-Time Messaging Application\" used WebSockets and potentially RabbitMQ. If RabbitMQ acts as the STOMP message broker, how would it broadcast messages?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "WebSocket (STOMP)",
            "RabbitMQ",
            "message broker",
            "Real-Time Messaging Application"
          ],
          "options": [
            "By clients polling RabbitMQ directly for new messages.",
            "By RabbitMQ forwarding messages from producer to multiple subscribed consumers via exchanges.",
            "By converting WebSocket frames to REST calls for individual clients.",
            "By caching messages in Redis and letting clients fetch them on demand."
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "To manage component-specific state.",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 4
        },
        {
          "questionId": "2",
          "answer": "PUT",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Directly connecting to the MySQL database.",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "Manual offset committing after processing.",
          "selectedIndex": 0,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Improving frontend UI rendering performance.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "By clients polling RabbitMQ directly for new messages.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    },
    "s_1759417436655": {
      "id": "s_1759417436655",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway Standalone project, which framework was primarily used for developing the RESTful API application?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "Payment Gateway",
            "RESTful APIs"
          ],
          "options": [
            "J2EE",
            "Node.js",
            "Spring Boot",
            "React.js"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "Given your listed experience with React.js, what is a core architectural concept it primarily promotes?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "React.js",
            "component-based",
            "frontend"
          ],
          "options": [
            "Model-View-Controller (MVC)",
            "Component-Based Architecture",
            "Aspect-Oriented Programming (AOP)",
            "Event Sourcing"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "How did the Event-Driven Order Processing System ensure \"at-least-once processing\" using Apache Kafka?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Apache Kafka",
            "event-driven",
            "at-least-once",
            "consumer groups",
            "idempotency"
          ],
          "options": [
            "By implementing transaction managers for each service",
            "Through consumer groups and idempotency",
            "Using only synchronous message acknowledgments",
            "By manually re-sending failed events"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In the Library Management System, how were query performance issues for paginated search APIs addressed, as described in the project?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Library Management System",
            "paginated search",
            "DB indexes",
            "MySQL",
            "Hibernate"
          ],
          "options": [
            "By using a NoSQL database for search queries",
            "By always fetching all records and filtering in memory",
            "By optimizing queries with appropriate database indexes",
            "By implementing client-side pagination only"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "If RabbitMQ were optionally used in your Real-Time Messaging Application, what key advantage would it provide for scaling the WebSocket architecture?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "WebSocket",
            "RabbitMQ",
            "scaling",
            "distributed",
            "message broker"
          ],
          "options": [
            "It would replace STOMP as the primary protocol.",
            "It would provide an external, robust message broker for distributed message routing.",
            "It would enable direct client-to-client communication without a server.",
            "It would primarily serve as a caching layer for messages."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "Considering your listed experience with Three.js and P5.js, what is their primary use case in web development?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Three.js",
            "P5.js",
            "web graphics",
            "interactive experiences",
            "frontend"
          ],
          "options": [
            "Server-side rendering for web applications",
            "Managing application state in complex UIs",
            "Creating interactive 2D and 3D graphics or visualizations in the browser",
            "Optimizing database queries for frontend performance"
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Node.js",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 7
        },
        {
          "questionId": "3",
          "answer": "Aspect-Oriented Programming (AOP)",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "2",
          "answer": "By implementing transaction managers for each service",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "By always fetching all records and filtering in memory",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "It would replace STOMP as the primary protocol.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Creating interactive 2D and 3D graphics or visualizations in the browser",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 6
        }
      ]
    },
    "s_1759417561421": {
      "id": "s_1759417561421",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, Prajwal used `LocalStorage` for real-time, persistent client-side data. What is a key limitation of `LocalStorage` for data management?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "LocalStorage",
            "Reverie Diary",
            "frontend"
          ],
          "options": [
            "Data is automatically synced across all user devices.",
            "Data size is unlimited, making it suitable for large datasets.",
            "Data is not accessible across different browser origins.",
            "Data is wiped every time the browser tab is closed."
          ],
          "correctIndex": 2
        },
        {
          "id": "2",
          "text": "Prajwal's CryptoMetrics project stores metrics in `MongoDB`. What type of database is `MongoDB` primarily categorized as?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "MongoDB",
            "CryptoMetrics",
            "backend"
          ],
          "options": [
            "Relational SQL database",
            "Document-oriented NoSQL database",
            "Graph database",
            "Key-value store"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "The MangaFlow Chrome Extension used `Manifest V3` and background service workers. What is a key architectural shift for background logic introduced by `Manifest V3`?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Manifest V3",
            "Chrome Extensions API",
            "JavaScript"
          ],
          "options": [
            "Eliminating background scripts entirely.",
            "Replacing persistent background pages with event-driven service workers.",
            "Requiring all background logic to run on the main thread.",
            "Allowing direct DOM manipulation from service workers."
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "Prajwal employed `NATS pub-sub messaging` in CryptoMetrics to broadcast updates. What is the primary benefit of using a pub-sub model like `NATS` for real-time data updates?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "NATS",
            "pub-sub",
            "CryptoMetrics",
            "Node.js"
          ],
          "options": [
            "Ensures strict sequential processing of all messages.",
            "Provides direct, synchronous communication between two services.",
            "Decouples senders from receivers, enabling scalable real-time updates.",
            "Primarily used for batch processing large data files."
          ],
          "correctIndex": 2
        },
        {
          "id": "5",
          "text": "In DataAlchemist, Prajwal integrated `Google Gemini API` to convert natural language rules into executable logic. For security and key management, where should the `Gemini API` call ideally be made in a `Next.js` application?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Google Gemini API",
            "Next.js",
            "TypeScript",
            "DataAlchemist"
          ],
          "options": [
            "Directly from a client-side React component.",
            "Through a Next.js API route (serverless function).",
            "Embedded in a static HTML file for faster loading.",
            "Via a CDN that directly exposes the API key."
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "Prajwal deployed the CryptoMetrics backend on Linux using `PM2` and cron. What is a critical function `PM2` provides for ensuring the `Node.js` backend's reliability and uptime in production?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "PM2",
            "Node.js",
            "Express.js",
            "Linux",
            "CryptoMetrics"
          ],
          "options": [
            "Generating automatic frontend UI components.",
            "Automating database schema migrations.",
            "Managing application processes, including automatic restarts on crashes.",
            "Providing real-time code transpilation during deployment."
          ],
          "correctIndex": 2
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "Data size is unlimited, making it suitable for large datasets.",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "Relational SQL database",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Allowing direct DOM manipulation from service workers.",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 7
        },
        {
          "questionId": "4",
          "answer": "Decouples senders from receivers, enabling scalable real-time updates.",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "Directly from a client-side React component.",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Managing application processes, including automatic restarts on crashes.",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 0
        }
      ]
    },
    "s_1759417845132": {
      "id": "s_1759417845132",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In Reverie Diary, which technology was primarily used for crafting the polished UI with specific styles like glassmorphism and metal textures?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Reverie Diary",
            "Tailwind CSS",
            "glassmorphism",
            "UI"
          ],
          "options": [
            "Tailwind CSS",
            "Chart.js",
            "React.js",
            "LocalStorage"
          ],
          "correctIndex": 0
        },
        {
          "id": "2",
          "text": "For the CryptoMetrics project, which NoSQL database was utilized to persistently store metrics like price, market cap, and volume for 50+ crypto assets?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "CryptoMetrics",
            "MongoDB",
            "database",
            "metrics"
          ],
          "options": [
            "MySQL",
            "MongoDB",
            "NATS",
            "Postman"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In DataAlchemist, virtualized rendering was implemented. What was its primary benefit for efficiently handling and displaying 1,000+ CSV-based rows?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "DataAlchemist",
            "virtualized rendering",
            "CSV",
            "performance"
          ],
          "options": [
            "Reduced server-side processing",
            "Minimized database queries",
            "Efficiently rendered large datasets in the UI",
            "Enabled offline data access"
          ],
          "correctIndex": 2
        },
        {
          "id": "4",
          "text": "In CryptoMetrics, what was the primary purpose of employing NATS pub-sub messaging within the Node.js and Express.js backend system?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "CryptoMetrics",
            "NATS",
            "pub-sub",
            "real-time updates",
            "Node.js",
            "Express.js"
          ],
          "options": [
            "Store persistent configuration data",
            "Broadcast real-time updates to services",
            "Process user authentication requests",
            "Perform complex database joins"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "For MangaFlow, the Chrome extension leveraged Manifest V3 and background service workers. What key architectural advantage did this provide?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "MangaFlow",
            "Chrome extension",
            "Manifest V3",
            "background service workers",
            "event-driven architecture"
          ],
          "options": [
            "Simplified direct DOM manipulation",
            "Enabled efficient and extensible event-driven architecture",
            "Allowed server-side preference storage",
            "Provided automatic UI generation for 50+ sites"
          ],
          "correctIndex": 1
        },
        {
          "id": "6",
          "text": "In CryptoMetrics, beyond initial deployment with PM2, what specific strategy was used to maintain data freshness from CoinGecko API and handle rate limits?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "CryptoMetrics",
            "CoinGecko API",
            "rate limits",
            "data freshness",
            "cron",
            "retry logic"
          ],
          "options": [
            "Manual updates via Postman",
            "Client-side caching with Redis",
            "Serverless functions for on-demand calls",
            "Cron-based syncing and retry logic"
          ],
          "correctIndex": 3
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "LocalStorage",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 2
        },
        {
          "questionId": "2",
          "answer": "NATS",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "3",
          "answer": "Efficiently rendered large datasets in the UI",
          "selectedIndex": 2,
          "isCorrect": true,
          "timeUsed": 1
        },
        {
          "questionId": "4",
          "answer": "Broadcast real-time updates to services",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 1
        },
        {
          "questionId": "5",
          "answer": "Provided automatic UI generation for 50+ sites",
          "selectedIndex": 3,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Manual updates via Postman",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 2
        }
      ]
    },
    "s_1759418246043": {
      "id": "s_1759418246043",
      "candidate": {
        "name": "Prajwal Chahande",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In your Payment Gateway project, which Spring Boot annotation typically defines a class handling REST requests?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "Payment Gateway Standalone"
          ],
          "options": [
            "@Controller",
            "@Service",
            "@Repository",
            "@RestController"
          ],
          "correctIndex": 3
        },
        {
          "id": "2",
          "text": "What is the primary benefit of using SockJS fallback in your Real-Time Messaging Application's WebSocket configuration?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "SockJS",
            "WebSocket",
            "Real-Time Messaging Application"
          ],
          "options": [
            "Improves database performance",
            "Allows older browsers to use WebSockets",
            "Encrypts messages end-to-end",
            "Reduces server CPU load"
          ],
          "correctIndex": 1
        },
        {
          "id": "3",
          "text": "In your Event-Driven Order Processing System, how did you ensure \"at-least-once processing\" with Kafka consumers?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Apache Kafka",
            "Event-Driven Systems",
            "microservices"
          ],
          "options": [
            "Committing offsets after successful processing",
            "Disabling Kafka consumer retries",
            "Setting `acks=0` for producers",
            "Using a single consumer instance per topic"
          ],
          "correctIndex": 0
        },
        {
          "id": "4",
          "text": "When applying TDD with JUnit to core service logic in your Library Management System, what was typically the first step?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "TDD",
            "JUnit",
            "Library Management System"
          ],
          "options": [
            "Writing production code",
            "Writing a failing test",
            "Refactoring existing code",
            "Designing the database schema"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In your Event-Driven Order Processing System, what is the primary purpose of combining retry/backoff strategies with dead-letter topics?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Apache Kafka",
            "Event-Driven Systems",
            "microservices",
            "dead-letter topics"
          ],
          "options": [
            "To re-process all failed events indefinitely",
            "To ensure immediate message deletion",
            "To handle transient failures and isolate permanently unprocessable messages",
            "To distribute message load across consumers"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "If RabbitMQ replaced an in-memory broker in your Real-Time Messaging App, how would it primarily impact scalability and message persistence?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "RabbitMQ",
            "WebSocket",
            "Spring Boot",
            "Real-Time Messaging Application"
          ],
          "options": [
            "No impact, as message brokers are interchangeable",
            "Improves scalability and adds message persistence",
            "Increases message throughput by default",
            "Simplifies client-side WebSocket implementation"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "@Controller",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 4
        },
        {
          "questionId": "2",
          "answer": "Improves database performance",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "Disabling Kafka consumer retries",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "4",
          "answer": "Refactoring existing code",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "To re-process all failed events indefinitely",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "Increases message throughput by default",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 2
        }
      ]
    },
    "s_1759419454070": {
      "id": "s_1759419454070",
      "candidate": {
        "name": "Prajwal Chahande+91-9860738071",
        "email": "prajwalchahande7@gmail.com"
      },
      "questions": [
        {
          "id": "1",
          "text": "In the Payment Gateway Standalone project, which Spring Boot annotation would you primarily use to define an API endpoint for creating a new payment?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Spring Boot",
            "RESTful APIs",
            "Payment Gateway"
          ],
          "options": [
            "A. @GetMapping",
            "B. @PostMapping",
            "C. @PutMapping",
            "D. @DeleteMapping"
          ],
          "correctIndex": 1
        },
        {
          "id": "2",
          "text": "For the Library Management System, which tool from your resume did you primarily use to implement TDD for core service logic?",
          "difficulty": "Easy",
          "timeLimit": 20,
          "keywords": [
            "Library Management System",
            "TDD",
            "JUnit"
          ],
          "options": [
            "A. Maven",
            "B. Jenkins",
            "C. JUnit",
            "D. Mockito"
          ],
          "correctIndex": 2
        },
        {
          "id": "3",
          "text": "In the Event-Driven Order Processing System, to ensure \"at-least-once\" processing with consumer groups and maintain data integrity, what mechanism is key for handling duplicate events?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Event-Driven",
            "Kafka",
            "at-least-once",
            "idempotency"
          ],
          "options": [
            "A. Using unique Kafka topic names",
            "B. Implementing idempotent consumers",
            "C. Disabling consumer groups",
            "D. Setting auto-commit to true"
          ],
          "correctIndex": 1
        },
        {
          "id": "4",
          "text": "For the Real-Time Messaging Application, what was the primary role of SockJS in conjunction with STOMP WebSockets, as configured in Spring Boot?",
          "difficulty": "Medium",
          "timeLimit": 60,
          "keywords": [
            "Real-Time Messaging",
            "WebSocket",
            "STOMP",
            "SockJS"
          ],
          "options": [
            "A. Encrypting messages for secure communication",
            "B. Providing a fallback option for browsers without WebSocket support",
            "C. Managing user authentication and authorization",
            "D. Storing chat message history in MongoDB"
          ],
          "correctIndex": 1
        },
        {
          "id": "5",
          "text": "In the Event-Driven Order Processing System, when an event consistently fails despite retry/backoff strategies, what is the intended purpose of moving it to a dead-letter topic?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Event-Driven",
            "Kafka",
            "retry/backoff",
            "dead-letter topics"
          ],
          "options": [
            "A. To immediately reprocess the event with higher priority",
            "B. To permanently discard the event from the system",
            "C. To isolate problematic events for manual inspection and debugging",
            "D. To forward the event to a different microservice for alternative processing"
          ],
          "correctIndex": 2
        },
        {
          "id": "6",
          "text": "The Payment Gateway Standalone project \"validated requests using system-specific headers and ensured secure access.\" What architectural pattern or principle does this most align with for API security and access control?",
          "difficulty": "Hard",
          "timeLimit": 120,
          "keywords": [
            "Payment Gateway",
            "security",
            "system-specific headers",
            "secure access"
          ],
          "options": [
            "A. OAuth2 for token-based authentication",
            "B. Implementing a custom API Key or signature validation",
            "C. Relying solely on network-level firewall rules",
            "D. Using database encryption for all payment data"
          ],
          "correctIndex": 1
        }
      ],
      "answers": [
        {
          "questionId": "1",
          "answer": "",
          "timeUsed": 21
        },
        {
          "questionId": "2",
          "answer": "",
          "timeUsed": 1
        },
        {
          "questionId": "3",
          "answer": "C. Disabling consumer groups",
          "selectedIndex": 2,
          "isCorrect": false,
          "timeUsed": 5
        },
        {
          "questionId": "4",
          "answer": "B. Providing a fallback option for browsers without WebSocket support",
          "selectedIndex": 1,
          "isCorrect": true,
          "timeUsed": 0
        },
        {
          "questionId": "5",
          "answer": "B. To permanently discard the event from the system",
          "selectedIndex": 1,
          "isCorrect": false,
          "timeUsed": 0
        },
        {
          "questionId": "6",
          "answer": "A. OAuth2 for token-based authentication",
          "selectedIndex": 0,
          "isCorrect": false,
          "timeUsed": 0
        }
      ]
    }
  }
}